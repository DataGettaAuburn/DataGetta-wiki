{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"About-SSH/","text":"Understanding SSH on an Ubuntu Server 1\ufe0f\u20e3 What is SSH? SSH ( Secure Shell ) is a protocol that allows secure remote access to a machine over a network. It is encrypted , meaning all communication between your computer (client) and the server is protected from eavesdropping . On an Ubuntu VM/server , SSH functions as a client-server system , where: - Your local computer is the SSH client . - The Ubuntu VM/server runs the SSH server (sshd) . 2\ufe0f\u20e3 How SSH Works Step 1: SSH Server (sshd) Runs on the Ubuntu VM On the Ubuntu server , an SSH daemon ( sshd ) listens for incoming connections on port 22 (default) . To check if SSH is running: sudo systemctl status ssh If SSH is not running, start it: sudo systemctl start ssh To ensure SSH starts on boot: sudo systemctl enable ssh Step 2: Connecting to the SSH Server from Your Local Machine To connect to the Ubuntu server, use the following SSH command from your terminal: ssh [your-username]@your-server-ip For example, if connecting to datagetta_servers : ssh yourusername@datagetta.cse.eng.auburn.edu When this command runs: 1. The SSH client finds the server's IP address . 2. It requests authentication (password or SSH key). 3. If authentication succeeds , an encrypted session starts, allowing you to execute commands remotely. 3\ufe0f\u20e3 SSH Authentication Methods There are two main ways to authenticate: A) Password Authentication (Less Secure) You enter your password manually each time you log in. If the server allows password authentication ( PasswordAuthentication yes in /etc/ssh/sshd_config ), you will be prompted for a password. B) SSH Key Authentication (More Secure) Instead of passwords, SSH keys (public-private key pairs) are used. The private key stays on your local machine, and the public key is added to the server. 4\ufe0f\u20e3 Understanding SSH Keys SSH keys provide passwordless login and better security . Generating SSH Keys To generate a new SSH key pair on your local machine : ssh-keygen -t rsa -b 4096 -C \"your-email@example.com\" This creates: - Private Key ( ~/.ssh/id_rsa ) \u2192 DO NOT share this! - Public Key ( ~/.ssh/id_rsa.pub ) \u2192 Can be added to an SSH server for authentication. 5\ufe0f\u20e3 How the Server Uses Your SSH Key When you try to log in: 1. The SSH client sends the public key to the server. 2. The server checks if it exists in ~/.ssh/authorized_keys . 3. If the key matches, the server encrypts a challenge message . 4. Your local machine decrypts it using your private key and proves your identity. 5. You are logged in without needing a password . 6\ufe0f\u20e3 Setting Up SSH Key Authentication on an Ubuntu Server Step 1: Copy Your Public Key to the Server To allow passwordless SSH login , add your key to the server's authorized_keys file. On your local machine , run: ssh-copy-id yourusername@datagetta.cse.eng.auburn.edu Or manually: scp ~/.ssh/id_rsa.pub yourusername@datagetta.cse.eng.auburn.edu:~/ Then log into the server: ssh yourusername@datagetta.cse.eng.auburn.edu Append the key to authorized_keys : mkdir -p ~/.ssh cat ~/id_rsa.pub >> ~/.ssh/authorized_keys chmod 600 ~/.ssh/authorized_keys rm ~/id_rsa.pub Step 2: Disable Password Authentication (For Security) Edit the SSH configuration file: sudo nano /etc/ssh/sshd_config Find and change: PasswordAuthentication no PermitRootLogin no Restart SSH for changes to take effect: sudo systemctl restart ssh 7\ufe0f\u20e3 The .ssh Directory on the Server After setting up SSH keys, the ~/.ssh/ folder on the server will look like: /home/yourusername/.ssh/ \u251c\u2500\u2500 authorized_keys # Contains all public keys that are allowed to log in \u251c\u2500\u2500 known_hosts # Keeps a record of previously connected SSH servers To view existing SSH keys: ls -la ~/.ssh To check allowed SSH keys: cat ~/.ssh/authorized_keys 8\ufe0f\u20e3 Secure SSH with a Firewall To prevent unauthorized SSH access, configure the firewall: sudo ufw allow OpenSSH sudo ufw enable sudo ufw status This ensures only trusted clients can access your server. \ud83d\udee0\ufe0f Summary of SSH on Ubuntu \u2705 SSH Server ( sshd ) runs on port 22 \u2705 Clients connect via SSH using password or key authentication \u2705 SSH Keys provide secure, passwordless login \u2705 The .ssh folder contains authentication settings \u2705 Configuring sshd_config improves security 9\ufe0f\u20e3 Debugging SSH Issues If you are having trouble connecting, check: sudo journalctl -u ssh --since \"1 hour ago\" Or inspect failed login attempts: sudo tail -f /var/log/auth.log \ud83d\ude80 Next Steps Would you like to configure GitHub Actions for secure, passwordless SSH deployments ? Let me know if you need automated SSH key management for your team!","title":"About-SSH"},{"location":"About-SSH/#understanding-ssh-on-an-ubuntu-server","text":"","title":"Understanding SSH on an Ubuntu Server"},{"location":"About-SSH/#1-what-is-ssh","text":"SSH ( Secure Shell ) is a protocol that allows secure remote access to a machine over a network. It is encrypted , meaning all communication between your computer (client) and the server is protected from eavesdropping . On an Ubuntu VM/server , SSH functions as a client-server system , where: - Your local computer is the SSH client . - The Ubuntu VM/server runs the SSH server (sshd) .","title":"1\ufe0f\u20e3 What is SSH?"},{"location":"About-SSH/#2-how-ssh-works","text":"","title":"2\ufe0f\u20e3 How SSH Works"},{"location":"About-SSH/#step-1-ssh-server-sshd-runs-on-the-ubuntu-vm","text":"On the Ubuntu server , an SSH daemon ( sshd ) listens for incoming connections on port 22 (default) . To check if SSH is running: sudo systemctl status ssh If SSH is not running, start it: sudo systemctl start ssh To ensure SSH starts on boot: sudo systemctl enable ssh","title":"Step 1: SSH Server (sshd) Runs on the Ubuntu VM"},{"location":"About-SSH/#step-2-connecting-to-the-ssh-server-from-your-local-machine","text":"To connect to the Ubuntu server, use the following SSH command from your terminal: ssh [your-username]@your-server-ip For example, if connecting to datagetta_servers : ssh yourusername@datagetta.cse.eng.auburn.edu When this command runs: 1. The SSH client finds the server's IP address . 2. It requests authentication (password or SSH key). 3. If authentication succeeds , an encrypted session starts, allowing you to execute commands remotely.","title":"Step 2: Connecting to the SSH Server from Your Local Machine"},{"location":"About-SSH/#3-ssh-authentication-methods","text":"There are two main ways to authenticate:","title":"3\ufe0f\u20e3 SSH Authentication Methods"},{"location":"About-SSH/#a-password-authentication-less-secure","text":"You enter your password manually each time you log in. If the server allows password authentication ( PasswordAuthentication yes in /etc/ssh/sshd_config ), you will be prompted for a password.","title":"A) Password Authentication (Less Secure)"},{"location":"About-SSH/#b-ssh-key-authentication-more-secure","text":"Instead of passwords, SSH keys (public-private key pairs) are used. The private key stays on your local machine, and the public key is added to the server.","title":"B) SSH Key Authentication (More Secure)"},{"location":"About-SSH/#4-understanding-ssh-keys","text":"SSH keys provide passwordless login and better security .","title":"4\ufe0f\u20e3 Understanding SSH Keys"},{"location":"About-SSH/#generating-ssh-keys","text":"To generate a new SSH key pair on your local machine : ssh-keygen -t rsa -b 4096 -C \"your-email@example.com\" This creates: - Private Key ( ~/.ssh/id_rsa ) \u2192 DO NOT share this! - Public Key ( ~/.ssh/id_rsa.pub ) \u2192 Can be added to an SSH server for authentication.","title":"Generating SSH Keys"},{"location":"About-SSH/#5-how-the-server-uses-your-ssh-key","text":"When you try to log in: 1. The SSH client sends the public key to the server. 2. The server checks if it exists in ~/.ssh/authorized_keys . 3. If the key matches, the server encrypts a challenge message . 4. Your local machine decrypts it using your private key and proves your identity. 5. You are logged in without needing a password .","title":"5\ufe0f\u20e3 How the Server Uses Your SSH Key"},{"location":"About-SSH/#6-setting-up-ssh-key-authentication-on-an-ubuntu-server","text":"","title":"6\ufe0f\u20e3 Setting Up SSH Key Authentication on an Ubuntu Server"},{"location":"About-SSH/#step-1-copy-your-public-key-to-the-server","text":"To allow passwordless SSH login , add your key to the server's authorized_keys file. On your local machine , run: ssh-copy-id yourusername@datagetta.cse.eng.auburn.edu Or manually: scp ~/.ssh/id_rsa.pub yourusername@datagetta.cse.eng.auburn.edu:~/ Then log into the server: ssh yourusername@datagetta.cse.eng.auburn.edu Append the key to authorized_keys : mkdir -p ~/.ssh cat ~/id_rsa.pub >> ~/.ssh/authorized_keys chmod 600 ~/.ssh/authorized_keys rm ~/id_rsa.pub","title":"Step 1: Copy Your Public Key to the Server"},{"location":"About-SSH/#step-2-disable-password-authentication-for-security","text":"Edit the SSH configuration file: sudo nano /etc/ssh/sshd_config Find and change: PasswordAuthentication no PermitRootLogin no Restart SSH for changes to take effect: sudo systemctl restart ssh","title":"Step 2: Disable Password Authentication (For Security)"},{"location":"About-SSH/#7-the-ssh-directory-on-the-server","text":"After setting up SSH keys, the ~/.ssh/ folder on the server will look like: /home/yourusername/.ssh/ \u251c\u2500\u2500 authorized_keys # Contains all public keys that are allowed to log in \u251c\u2500\u2500 known_hosts # Keeps a record of previously connected SSH servers To view existing SSH keys: ls -la ~/.ssh To check allowed SSH keys: cat ~/.ssh/authorized_keys","title":"7\ufe0f\u20e3 The .ssh Directory on the Server"},{"location":"About-SSH/#8-secure-ssh-with-a-firewall","text":"To prevent unauthorized SSH access, configure the firewall: sudo ufw allow OpenSSH sudo ufw enable sudo ufw status This ensures only trusted clients can access your server.","title":"8\ufe0f\u20e3 Secure SSH with a Firewall"},{"location":"About-SSH/#summary-of-ssh-on-ubuntu","text":"\u2705 SSH Server ( sshd ) runs on port 22 \u2705 Clients connect via SSH using password or key authentication \u2705 SSH Keys provide secure, passwordless login \u2705 The .ssh folder contains authentication settings \u2705 Configuring sshd_config improves security","title":"\ud83d\udee0\ufe0f Summary of SSH on Ubuntu"},{"location":"About-SSH/#9-debugging-ssh-issues","text":"If you are having trouble connecting, check: sudo journalctl -u ssh --since \"1 hour ago\" Or inspect failed login attempts: sudo tail -f /var/log/auth.log","title":"9\ufe0f\u20e3 Debugging SSH Issues"},{"location":"About-SSH/#next-steps","text":"Would you like to configure GitHub Actions for secure, passwordless SSH deployments ? Let me know if you need automated SSH key management for your team!","title":"\ud83d\ude80 Next Steps"},{"location":"App-Folder/","text":"App Folder The app/ folder serves as the root directory for the Next.js application, containing the foundational layout and landing page. Structure the-eye/ - The main application logic and UI components. utils/ - Utility functions, theming, database connections, and type definitions. layout.tsx - Defines the global layout, including Material UI theming. page.tsx - The landing page for the application. File Descriptions layout.tsx Purpose : Acts as the root layout for the application. Key Features : Uses Material UI for styling. Integrates Next.js App Router caching for performance. Applies global theming from utils/theme.ts . Includes CSS Baseline for consistent styles. page.tsx Purpose : The landing page for the app, located at https://datagetta.app . Key Features : Displays an animated background using lineAnimation.gif . Shows the app title (DATA GETTA) in Auburn colors. Provides a Login button that redirects users to /the-eye/ . Uses Material UI components for styling. Summary The app/ folder contains the core layout and landing page for the application, ensuring that global styles, themes, and performance optimizations are applied consistently throughout the project.","title":"App-Folder"},{"location":"App-Folder/#app-folder","text":"The app/ folder serves as the root directory for the Next.js application, containing the foundational layout and landing page.","title":"App Folder"},{"location":"App-Folder/#structure","text":"the-eye/ - The main application logic and UI components. utils/ - Utility functions, theming, database connections, and type definitions. layout.tsx - Defines the global layout, including Material UI theming. page.tsx - The landing page for the application.","title":"Structure"},{"location":"App-Folder/#file-descriptions","text":"","title":"File Descriptions"},{"location":"App-Folder/#layouttsx","text":"Purpose : Acts as the root layout for the application. Key Features : Uses Material UI for styling. Integrates Next.js App Router caching for performance. Applies global theming from utils/theme.ts . Includes CSS Baseline for consistent styles.","title":"layout.tsx"},{"location":"App-Folder/#pagetsx","text":"Purpose : The landing page for the app, located at https://datagetta.app . Key Features : Displays an animated background using lineAnimation.gif . Shows the app title (DATA GETTA) in Auburn colors. Provides a Login button that redirects users to /the-eye/ . Uses Material UI components for styling.","title":"page.tsx"},{"location":"App-Folder/#summary","text":"The app/ folder contains the core layout and landing page for the application, ensuring that global styles, themes, and performance optimizations are applied consistently throughout the project.","title":"Summary"},{"location":"App-Setup/","text":"Local App Setup (Inhereted Structure) Last Updated 3/24/25 by Tyler Teufel 1. (If Needed) Install Necessary Frameworks / Tools Locally The first step in getting this project setup for local development is to make sure your machine has the necessary local dependencies. Though some might already have these installed, in the case that you do not, the following must be installed in order to run the project locally: Docker Desktop (Windows) , Docker Desktop (Mac) , or Docker Desktop (Linux) Node.js (See drop down for different Operating Systems Options) Git 2. Clone Repo Locally from GitHub The next step is to clone the remote GitHub repository locally for development. Once you are in the desired directory to store the project folder in, run the following command: git clone https://github.com/tyler-teufel/datagetta.git From here, you can cd into the generated folder to access the project in its git repository, and develop in your desired IDE. 3. Install Node Dependencies If you have not already, run the following command to enter the project folder. If you have already opened the project folder in your IDE of choice, you may skip this step. cd datagetta Once in the project repo directory, the next step will be to navigate into the UI folder to install the node package dependencies needed to make the Next.js project and any additionally used packages operate as intended: cd dg-frontend npm install You can past both lines into the terminal and they should execute sequentially; however feel free to enter them one at a time as well. If any errors are encountered, double check that you have installed Node correctly, and that it is at least version 21. Please Note: This may take a minute or so upon the first installation. This is a large project, so if you see the animated spinning loader icon in the terminal, it should be working as intended. 3. Pull the Required Docker Images from Remote Registry Next, we need to pull the 3 images needed to run the project into your local docker environment, which have the correct image versions configured in the docker-compose.yaml file. To pull the images from the remote registry, run the following: docker compose pull If your system does not recognize docker for whatever reason, please verify the installation worked correctly. Run the Docker Compose File to Start the Containers In order to have the pulled docker images begin to run as containers, allowing your project to get started, run the following command from the outer directory, with the locally configured docker-compose.override.yaml file: docker compose -f up -d It is imperative that, when working locally, you ensure you utilize the overflow file such that you are not using the prod setup. The terminal should show the containers starting, and finish with dialog that either says started or running . From here, open up your browser and navigate to localhost:3000 to access the Next.js web app. 4. Setup Python Environment To get setup with the parser locally, first you want to navigate back to the home directory of the project, and setup your venv: cd .. # This should take you back to the root directory /datagetta Once in the root directory, run the following to create your venv with the closest python version you have to 3.10 : For Unix based OS (Mac / Linux): python3.10 -m venv dg-env source dg-env/bin/activate For Windows: python3.10 -m venv dg-env source dg-env/Scripts/activate Please note - you do not have to install 3.10 if you do not have it. Simply use the lowest python version you have. Next, you need to navigate to the parser directory: cd csvparser/src Once you are in src, you need to install the python package dependencies in the venv. Make sure to first verify that your terminal is using the correct python venv: which python3 # Or which python for windows If the returned path leads to your venv folder, then you are ready to continue. You then install the dependencies using pip : pip3 install -r requirements.txt for more info regarding package updates, see that wiki page here . 5. Run Parser Please note - you can also run this directly in the container; however this is how I (Tyler) have been going about it. In the src directory, running the parser is as easy as this command: python3 ftpPuller.py Please note - this will take several hours!","title":"App-Setup"},{"location":"App-Setup/#local-app-setup-inhereted-structure","text":"Last Updated 3/24/25 by Tyler Teufel","title":"Local App Setup (Inhereted Structure)"},{"location":"App-Setup/#1-if-needed-install-necessary-frameworks-tools-locally","text":"The first step in getting this project setup for local development is to make sure your machine has the necessary local dependencies. Though some might already have these installed, in the case that you do not, the following must be installed in order to run the project locally: Docker Desktop (Windows) , Docker Desktop (Mac) , or Docker Desktop (Linux) Node.js (See drop down for different Operating Systems Options) Git","title":"1. (If Needed) Install Necessary Frameworks / Tools Locally"},{"location":"App-Setup/#2-clone-repo-locally-from-github","text":"The next step is to clone the remote GitHub repository locally for development. Once you are in the desired directory to store the project folder in, run the following command: git clone https://github.com/tyler-teufel/datagetta.git From here, you can cd into the generated folder to access the project in its git repository, and develop in your desired IDE.","title":"2. Clone Repo Locally from GitHub"},{"location":"App-Setup/#3-install-node-dependencies","text":"If you have not already, run the following command to enter the project folder. If you have already opened the project folder in your IDE of choice, you may skip this step. cd datagetta Once in the project repo directory, the next step will be to navigate into the UI folder to install the node package dependencies needed to make the Next.js project and any additionally used packages operate as intended: cd dg-frontend npm install You can past both lines into the terminal and they should execute sequentially; however feel free to enter them one at a time as well. If any errors are encountered, double check that you have installed Node correctly, and that it is at least version 21. Please Note: This may take a minute or so upon the first installation. This is a large project, so if you see the animated spinning loader icon in the terminal, it should be working as intended.","title":"3. Install Node Dependencies"},{"location":"App-Setup/#3-pull-the-required-docker-images-from-remote-registry","text":"Next, we need to pull the 3 images needed to run the project into your local docker environment, which have the correct image versions configured in the docker-compose.yaml file. To pull the images from the remote registry, run the following: docker compose pull If your system does not recognize docker for whatever reason, please verify the installation worked correctly.","title":"3. Pull the Required Docker Images from Remote Registry"},{"location":"App-Setup/#run-the-docker-compose-file-to-start-the-containers","text":"In order to have the pulled docker images begin to run as containers, allowing your project to get started, run the following command from the outer directory, with the locally configured docker-compose.override.yaml file: docker compose -f up -d It is imperative that, when working locally, you ensure you utilize the overflow file such that you are not using the prod setup. The terminal should show the containers starting, and finish with dialog that either says started or running . From here, open up your browser and navigate to localhost:3000 to access the Next.js web app.","title":"Run the Docker Compose File to Start the Containers"},{"location":"App-Setup/#4-setup-python-environment","text":"To get setup with the parser locally, first you want to navigate back to the home directory of the project, and setup your venv: cd .. # This should take you back to the root directory /datagetta Once in the root directory, run the following to create your venv with the closest python version you have to 3.10 : For Unix based OS (Mac / Linux): python3.10 -m venv dg-env source dg-env/bin/activate For Windows: python3.10 -m venv dg-env source dg-env/Scripts/activate Please note - you do not have to install 3.10 if you do not have it. Simply use the lowest python version you have. Next, you need to navigate to the parser directory: cd csvparser/src Once you are in src, you need to install the python package dependencies in the venv. Make sure to first verify that your terminal is using the correct python venv: which python3 # Or which python for windows If the returned path leads to your venv folder, then you are ready to continue. You then install the dependencies using pip : pip3 install -r requirements.txt for more info regarding package updates, see that wiki page here .","title":"4. Setup Python Environment"},{"location":"App-Setup/#5-run-parser","text":"Please note - you can also run this directly in the container; however this is how I (Tyler) have been going about it. In the src directory, running the parser is as easy as this command: python3 ftpPuller.py Please note - this will take several hours!","title":"5. Run Parser"},{"location":"CAS-setup-for-datagetta/","text":"CAS setup for datagetta This document describes how to setup your environment to allow for CAS authentication Local Environment Testing CAS locally requires the setup of a local CAS server, as the Auburn CAS server only authorizes apps within the auburn.edu namespace. You may have to change the validator type to CAS30 in api/route/[client]/route.ts also for authentication to work with the local CAS server. For information on setting up a local CAS server, check out the examples from this github repo: https://github.com/uhawaii-system-its-ti-iam/next-cas-client. If you are not testing CAS on your local build, remember to set NEXT_PUBLIC_DISABLE_AUTH=1 NEXT_PUBLIC_BASE_URL=http(s)://<app-url> NEXT_PUBLIC_CAS_URL=https://<cas-url>/cas # PLEASE GENERATE YOUR OWN 32 CHARACTER LONG PASSWORD NEXT_CAS_CLIENT_SECRET=[PASSWORD] # ONLY SET TO 0 IF TESTING LOCALLY NODE_TLS_REJECT_UNAUTHORIZED=0 NEXT_PUBLIC_DISABLE_AUTH=1 Both app-url and cas-url must be your local ip address followed by the port for each program. Using localhost may lead to issues with authentication. Place the env file in the base directory of your next app. Dev Test Environment Set up the env file as follows: NEXT_PUBLIC_BASE_URL=https://datagetta-devtest.eng.auburn.edu NEXT_PUBLIC_CAS_URL=https://authenticate.auburn.edu/cas # PLEASE GENERATE YOUR OWN 32 CHARACTER LONG PASSWORD NEXT_CAS_CLIENT_SECRET=[PASSWORD] # ONLY SET TO 0 IF TESTING LOCALLY NODE_TLS_REJECT_UNAUTHORIZED=1 NEXT_PUBLIC_DISABLE_AUTH=0 Store these env variables in GitHub secrets. Production Environment Set up the env file as follows: NEXT_PUBLIC_BASE_URL=https://datagetta.auburn.edu NEXT_PUBLIC_CAS_URL=https://authenticate.auburn.edu/cas # PLEASE GENERATE YOUR OWN 32 CHARACTER LONG PASSWORD NEXT_CAS_CLIENT_SECRET=[PASSWORD] # ONLY SET TO 0 IF TESTING LOCALLY NODE_TLS_REJECT_UNAUTHORIZED=1 NEXT_PUBLIC_DISABLE_AUTH=0 Store these env variables in GitHub secrets.","title":"CAS-setup-for-datagetta"},{"location":"CAS-setup-for-datagetta/#cas-setup-for-datagetta","text":"This document describes how to setup your environment to allow for CAS authentication","title":"CAS setup for datagetta"},{"location":"CAS-setup-for-datagetta/#local-environment","text":"Testing CAS locally requires the setup of a local CAS server, as the Auburn CAS server only authorizes apps within the auburn.edu namespace. You may have to change the validator type to CAS30 in api/route/[client]/route.ts also for authentication to work with the local CAS server. For information on setting up a local CAS server, check out the examples from this github repo: https://github.com/uhawaii-system-its-ti-iam/next-cas-client. If you are not testing CAS on your local build, remember to set NEXT_PUBLIC_DISABLE_AUTH=1 NEXT_PUBLIC_BASE_URL=http(s)://<app-url> NEXT_PUBLIC_CAS_URL=https://<cas-url>/cas # PLEASE GENERATE YOUR OWN 32 CHARACTER LONG PASSWORD NEXT_CAS_CLIENT_SECRET=[PASSWORD] # ONLY SET TO 0 IF TESTING LOCALLY NODE_TLS_REJECT_UNAUTHORIZED=0 NEXT_PUBLIC_DISABLE_AUTH=1 Both app-url and cas-url must be your local ip address followed by the port for each program. Using localhost may lead to issues with authentication. Place the env file in the base directory of your next app.","title":"Local Environment"},{"location":"CAS-setup-for-datagetta/#dev-test-environment","text":"Set up the env file as follows: NEXT_PUBLIC_BASE_URL=https://datagetta-devtest.eng.auburn.edu NEXT_PUBLIC_CAS_URL=https://authenticate.auburn.edu/cas # PLEASE GENERATE YOUR OWN 32 CHARACTER LONG PASSWORD NEXT_CAS_CLIENT_SECRET=[PASSWORD] # ONLY SET TO 0 IF TESTING LOCALLY NODE_TLS_REJECT_UNAUTHORIZED=1 NEXT_PUBLIC_DISABLE_AUTH=0 Store these env variables in GitHub secrets.","title":"Dev Test Environment"},{"location":"CAS-setup-for-datagetta/#production-environment","text":"Set up the env file as follows: NEXT_PUBLIC_BASE_URL=https://datagetta.auburn.edu NEXT_PUBLIC_CAS_URL=https://authenticate.auburn.edu/cas # PLEASE GENERATE YOUR OWN 32 CHARACTER LONG PASSWORD NEXT_CAS_CLIENT_SECRET=[PASSWORD] # ONLY SET TO 0 IF TESTING LOCALLY NODE_TLS_REJECT_UNAUTHORIZED=1 NEXT_PUBLIC_DISABLE_AUTH=0 Store these env variables in GitHub secrets.","title":"Production Environment"},{"location":"Components-%E2%80%90-Front-End/","text":"Components - The Eye This folder contains reusable UI components used throughout the application. These components help ensure consistency and modularity across the interface. Structure assets/ - Contains SVG assets used in the UI, including logos. ConferenceTable.tsx - Displays conference and team information with links to team pages. DesktopSideBar.tsx - Sidebar for desktop views. MobileSideBar.tsx - Sidebar optimized for mobile devices. TabGroup.tsx - Combines the logo and navigation tabs. Tabs.tsx - Handles individual tab components used in sidebars. TopBar.tsx - Renders the top navigation bar, including a future search bar. UI_Layout.tsx - Combines layout components and manages mobile menu behavior. Component Details ConferenceTable.tsx Displays a table of teams within a conference. Each team is a clickable link that navigates to its team page. Uses Material UI's Table , TableCell , and Typography for styling. DesktopSideBar.tsx Permanent sidebar visible only on desktop screens ( lg and up). Uses Material UI's Drawer component for structure. Contains TabGroup.tsx for navigation tabs. MobileSideBar.tsx Temporary sidebar optimized for mobile screens. Toggles open/close state based on user interaction. Uses Drawer component with an overlay effect. Contains TabGroup.tsx for navigation. TabGroup.tsx Displays The Eye logo at the top. Contains Tabs.tsx for navigation. Clicking the logo navigates back to the home page ( /the-eye ). Tabs.tsx Defines sidebar navigation items. Contains hardcoded links for Auburn's team page and general teams list. Uses Material UI\u2019s List , ListItemButton , and ListItemText . TopBar.tsx Displays the top navigation bar. Contains a menu button for opening the mobile sidebar. Will eventually include a search bar . Uses Material UI\u2019s AppBar , Toolbar , and IconButton . UI_Layout.tsx Wraps all layout components together. Manages mobile menu state and transitions. Uses useState to control sidebar toggle behavior. Usage Each component is designed to be imported and used across different sections of the app to maintain consistency in styling and behavior. Example usage: import ConferenceTable from \"../components/ConferenceTable\"; <ConferenceTable name=\"SEC\" teams={[{ TeamName: \"Auburn\", DisplayName: \"Auburn Tigers\" }]} /> For more details on a specific component, refer to its file directly.","title":"Components - The Eye"},{"location":"Components-%E2%80%90-Front-End/#components-the-eye","text":"This folder contains reusable UI components used throughout the application. These components help ensure consistency and modularity across the interface.","title":"Components - The Eye"},{"location":"Components-%E2%80%90-Front-End/#structure","text":"assets/ - Contains SVG assets used in the UI, including logos. ConferenceTable.tsx - Displays conference and team information with links to team pages. DesktopSideBar.tsx - Sidebar for desktop views. MobileSideBar.tsx - Sidebar optimized for mobile devices. TabGroup.tsx - Combines the logo and navigation tabs. Tabs.tsx - Handles individual tab components used in sidebars. TopBar.tsx - Renders the top navigation bar, including a future search bar. UI_Layout.tsx - Combines layout components and manages mobile menu behavior.","title":"Structure"},{"location":"Components-%E2%80%90-Front-End/#component-details","text":"","title":"Component Details"},{"location":"Components-%E2%80%90-Front-End/#conferencetabletsx","text":"Displays a table of teams within a conference. Each team is a clickable link that navigates to its team page. Uses Material UI's Table , TableCell , and Typography for styling.","title":"ConferenceTable.tsx"},{"location":"Components-%E2%80%90-Front-End/#desktopsidebartsx","text":"Permanent sidebar visible only on desktop screens ( lg and up). Uses Material UI's Drawer component for structure. Contains TabGroup.tsx for navigation tabs.","title":"DesktopSideBar.tsx"},{"location":"Components-%E2%80%90-Front-End/#mobilesidebartsx","text":"Temporary sidebar optimized for mobile screens. Toggles open/close state based on user interaction. Uses Drawer component with an overlay effect. Contains TabGroup.tsx for navigation.","title":"MobileSideBar.tsx"},{"location":"Components-%E2%80%90-Front-End/#tabgrouptsx","text":"Displays The Eye logo at the top. Contains Tabs.tsx for navigation. Clicking the logo navigates back to the home page ( /the-eye ).","title":"TabGroup.tsx"},{"location":"Components-%E2%80%90-Front-End/#tabstsx","text":"Defines sidebar navigation items. Contains hardcoded links for Auburn's team page and general teams list. Uses Material UI\u2019s List , ListItemButton , and ListItemText .","title":"Tabs.tsx"},{"location":"Components-%E2%80%90-Front-End/#topbartsx","text":"Displays the top navigation bar. Contains a menu button for opening the mobile sidebar. Will eventually include a search bar . Uses Material UI\u2019s AppBar , Toolbar , and IconButton .","title":"TopBar.tsx"},{"location":"Components-%E2%80%90-Front-End/#ui_layouttsx","text":"Wraps all layout components together. Manages mobile menu state and transitions. Uses useState to control sidebar toggle behavior.","title":"UI_Layout.tsx"},{"location":"Components-%E2%80%90-Front-End/#usage","text":"Each component is designed to be imported and used across different sections of the app to maintain consistency in styling and behavior. Example usage: import ConferenceTable from \"../components/ConferenceTable\"; <ConferenceTable name=\"SEC\" teams={[{ TeamName: \"Auburn\", DisplayName: \"Auburn Tigers\" }]} /> For more details on a specific component, refer to its file directly.","title":"Usage"},{"location":"DB-Update-Instructions/","text":"Database Update Instructions This document provides step-by-step instructions on how to update the database using pgAdmin or any other SQL query tool. Follow the steps below to execute the provided SQL queries. Prerequisites Before proceeding, ensure you have the following: 1. Access to the database via pgAdmin or another SQL query tool. 2. Necessary permissions to execute UPDATE , INSERT , or DELETE queries. 3. A backup of the database (recommended before making changes). Steps to Update the Database 1. Connect to the Database Open pgAdmin or your preferred SQL query tool. Connect to the target database using your credentials. 2. Open the Query Tool Navigate to the database you want to update. Open the Query Tool (in pgAdmin, right-click the database and select Query Tool ). 3. Execute the SQL Queries Copy and paste the following 4 SQL queries into the query tool and execute them one at a time. Query 1: Update batter view drop view if exists batter_stats_view_2024; create or replace view batter_stats_view_2024 as with at_bats_subquery as ( with hits_subquery as ( select \"Batter\", \"BatterTeam\", COUNT(*) filter (where \"PlayResult\" = 'Single' or \"PlayResult\" = 'Double' or \"PlayResult\" = 'Triple' or \"PlayResult\" = 'HomeRun' ) as hits, COUNT(*) filter (where \"PlayResult\" = 'Error' or \"PlayResult\" = 'Out' or \"PlayResult\" = 'FieldersChoice' or \"KorBB\" = 'Strikeout' or \"PlayResult\" = 'Single' or \"PlayResult\" = 'Double' or \"PlayResult\" = 'Triple' or \"PlayResult\" = 'HomeRun' ) as at_bats, COUNT(*) filter (where \"PlateLocHeight\" > 3.55 or \"PlateLocHeight\" < 1.77 or \"PlateLocSide\" > 0.86 or \"PlateLocSide\" < -0.86 ) as total_out_of_zone_pitches, COUNT(*) filter (where \"PlateLocHeight\" < 3.55 and \"PlateLocHeight\" > 1.77 and \"PlateLocSide\" < 0.86 and \"PlateLocSide\" > -0.86 ) as total_in_zone_pitches from trackman_metadata tm, trackman_batter tb, trackman_pitcher tp, seasons s where tm.\"PitchUID\" = tb.\"PitchUID\" and tb.\"PitchUID\" = tp.\"PitchUID\" and s.\"SeasonTitle\" = '2024' and tm.\"UTCDate\" >= s.\"StartDate\" and tm.\"UTCDate\" <= s.\"EndDate\" group by (\"Batter\", \"BatterTeam\") ) select tb.\"Batter\" as \"Batter\", tb.\"BatterTeam\" as \"BatterTeam\", hs.\"hits\" as \"hits\", hs.\"at_bats\" as \"at_bats\", COUNT(*) filter (where \"PitchCall\" = 'StrikeCalled' or \"PitchCall\" = 'StrikeSwinging' or \"PitchCall\" = 'FoulBallNotFieldable' ) as strikes, COUNT(*) filter (where \"KorBB\" = 'Walk') as walks, COUNT(*) filter (where \"KorBB\" = 'Strikeout') as strikeouts, COUNT(*) filter (where \"PlayResult\" = 'HomeRun') as homeruns, COUNT(*) filter (where \"PlayResult\" = 'Double' or \"PlayResult\" = 'Triple' or \"PlayResult\" = 'HomeRun' ) as extra_base_hits, COUNT(*) filter (where \"KorBB\" = 'Walk' or \"PitchCall\" = 'InPlay' or \"PitchCall\" = 'HitByPitch' or \"KorBB\" = 'Strikeout' ) as plate_appearances, COUNT(*) filter (where \"PitchCall\" = 'HitByPitch') as hit_by_pitch, COUNT(*) filter (where \"PlayResult\" = 'Sacrifice') as sacrifice, SUM(case when \"PlayResult\" = 'Single' then 1 when \"PlayResult\" = 'Double' then 2 when \"PlayResult\" = 'Triple' then 3 when \"PlayResult\" = 'HomeRun' then 4 else 0 end) as total_bases, case when at_bats = 0 then null else (hits + COUNT(*) filter (where \"KorBB\" = 'Walk' or \"PitchCall\" = 'HitByPitch'))::decimal / (COUNT(*) filter (where \"PlayResult\" = 'Error' or \"PlayResult\" = 'Out' or \"PlayResult\" = 'FieldersChoice' or \"KorBB\" = 'Strikeout' ) + hits + COUNT(*) filter (where \"KorBB\" = 'Walk' or \"PitchCall\" = 'HitByPitch') + COUNT(*) filter (where \"PlayResult\" = 'Sacrifice' and \"TaggedHitType\" = 'FlyBall')) end as on_base_percentage, case when at_bats = 0 then null else SUM(case when \"PlayResult\" = 'Single' then 1 when \"PlayResult\" = 'Double' then 2 when \"PlayResult\" = 'Triple' then 3 when \"PlayResult\" = 'HomeRun' then 4 else 0 end)::decimal / at_bats end as slugging_percentage, case when total_out_of_zone_pitches = 0 then null else COUNT(*) filter (where (\"PitchCall\" = 'StrikeSwinging' or \"PitchCall\" = 'FoulBallNotFieldable' or \"PitchCall\" = 'InPlay') and (\"PlateLocHeight\" > 3.55 or \"PlateLocHeight\" < 1.77 or \"PlateLocSide\" > 0.86 or \"PlateLocSide\" < -0.86) )::decimal / total_out_of_zone_pitches end as chase_percentage, case when total_in_zone_pitches = 0 then null else COUNT(*) filter (where \"PitchCall\" = 'StrikeSwinging' and \"PlateLocHeight\" < 3.55 and \"PlateLocHeight\" > 1.77 and \"PlateLocSide\" < 0.86 and \"PlateLocSide\" > -0.86 )::decimal / total_in_zone_pitches end as in_zone_whiff_percentage, COUNT(distinct \"GameUID\") as games from hits_subquery hs, trackman_batter tb, trackman_metadata tm, trackman_pitcher tp, seasons s where hs.\"Batter\" = tb.\"Batter\" and hs.\"BatterTeam\" = tb.\"BatterTeam\" and tb.\"PitchUID\" = tm.\"PitchUID\" and tm.\"PitchUID\" = tp.\"PitchUID\" and s.\"SeasonTitle\" = '2024' and tm.\"UTCDate\" >= s.\"StartDate\" and tm.\"UTCDate\" <= s.\"EndDate\" group by (tb.\"Batter\", tb.\"BatterTeam\", hs.\"hits\", hs.\"at_bats\", hs.\"total_out_of_zone_pitches\", hs.\"total_in_zone_pitches\") ) select *, case when at_bats = 0 then null else hits::decimal / at_bats end as batting_average, on_base_percentage + slugging_percentage as onbase_plus_slugging, slugging_percentage - case when at_bats = 0 then null else hits::decimal / at_bats end as isolated_power, case when plate_appearances = 0 then null else strikeouts::decimal / plate_appearances end as k_percentage, case when plate_appearances = 0 then null else walks::decimal / plate_appearances end as base_on_ball_percentage from at_bats_subquery; Query 2: Update pitcher view drop view if exists pitcher_stats_view_2024; create or replace view pitcher_stats_view_2024 as with pitcher_stats_subquery as ( with pitcher_stats_subquery_two as ( select tp2.\"Pitcher\" as \"Pitcher\", tp2.\"PitcherTeam\" as \"PitcherTeam\", COUNT(*) filter (where \"PlateLocHeight\" > 3.55 or \"PlateLocHeight\" < 1.77 or \"PlateLocSide\" > 0.86 or \"PlateLocSide\" < -0.86 ) as total_out_of_zone_pitches, COUNT(*) filter (where \"PlateLocHeight\" < 3.55 and \"PlateLocHeight\" > 1.77 and \"PlateLocSide\" < 0.86 and \"PlateLocSide\" > -0.86 ) as total_in_zone_pitches from trackman_batter tb2, trackman_metadata tm2, trackman_pitcher tp2, seasons s2 where tb2.\"PitchUID\" = tm2.\"PitchUID\" and tm2.\"PitchUID\" = tp2.\"PitchUID\" and s2.\"SeasonTitle\" = '2024' and tm2.\"UTCDate\" >= s2.\"StartDate\" and tm2.\"UTCDate\" <= s2.\"EndDate\" group by (tp2.\"Pitcher\", tp2.\"PitcherTeam\") ) select pss.\"Pitcher\" as \"Pitcher\", pss.\"PitcherTeam\" as \"PitcherTeam\", COUNT(*) filter (where \"KorBB\" = 'Strikeout') as total_strikeouts_pitcher, COUNT(*) filter (where \"KorBB\" = 'Walk') as total_walks_pitcher, COUNT(*) filter (where \"PlateLocHeight\" > 3.55 or \"PlateLocHeight\" < 1.77 or \"PlateLocSide\" > 0.86 or \"PlateLocSide\" < -0.86 ) as total_out_of_zone_pitches, COUNT(*) filter (where \"PitchCall\" = 'StrikeSwinging' and \"PlateLocHeight\" < 3.55 and \"PlateLocHeight\" > 1.77 and \"PlateLocSide\" < 0.86 and \"PlateLocSide\" > -0.86 ) as misses_in_zone, COUNT(*) filter (where \"PitchCall\" = 'StrikeSwinging' or \"PitchCall\" = 'FoulBallNotFieldable' or \"PitchCall\" = 'InPlay' and \"PlateLocHeight\" < 3.55 and \"PlateLocHeight\" > 1.77 and \"PlateLocSide\" < 0.86 and \"PlateLocSide\" > -0.86 ) as swings_in_zone, COUNT(*) filter (where \"PitchCall\" = 'StrikeSwinging' or \"PitchCall\" = 'FoulBallNotFieldable' and \"PlateLocHeight\" > 3.55 and \"PlateLocHeight\" < 1.77 and \"PlateLocSide\" > 0.86 and \"PlateLocSide\" < -0.86 ) as total_num_chases, COUNT(*) as pitches, COUNT(distinct \"GameUID\") as games, COUNT(*) filter (where \"Inning\" = 1 and \"Outs\" = 0 and \"Balls\" = 0 and \"Strikes\" = 0 and \"PAofInning\" = 1 ) as games_started, ROUND(((COUNT(*) filter (where \"KorBB\" = 'StrikeOut') + SUM(\"OutsOnPlay\"::integer)) / 3) + (((COUNT(*) filter (where \"KorBB\" = 'StrikeOut') + SUM(\"OutsOnPlay\"::integer)) % 3)::decimal / 10), 1) as total_innings_pitched, COUNT(distinct (\"PAofInning\", \"Inning\", \"Batter\", \"GameUID\")) as total_batters_faced, case when total_in_zone_pitches = 0 then null else COUNT(*) filter (where \"PitchCall\" = 'StrikeSwinging' and \"PlateLocHeight\" < 3.55 and \"PlateLocHeight\" > 1.77 and \"PlateLocSide\" < 0.86 and \"PlateLocSide\" > -0.86 )::decimal / total_in_zone_pitches end as in_zone_whiff_percentage, case when total_out_of_zone_pitches = 0 then null else COUNT(*) filter (where (\"PitchCall\" = 'StrikeSwinging' or \"PitchCall\" = 'FoulBallNotFieldable' or \"PitchCall\" = 'InPlay') and (\"PlateLocHeight\" > 3.55 or \"PlateLocHeight\" < 1.77 or \"PlateLocSide\" > 0.86 or \"PlateLocSide\" < -0.86) )::decimal / total_out_of_zone_pitches end as chase_percentage from pitcher_stats_subquery_two pss, trackman_metadata tm, trackman_pitcher tp, trackman_batter tb, seasons s where pss.\"Pitcher\" = tp.\"Pitcher\" and pss.\"PitcherTeam\" = tp.\"PitcherTeam\" and tm.\"PitchUID\" = tp.\"PitchUID\" and tm.\"PitchUID\" = tb.\"PitchUID\" and s.\"SeasonTitle\" = '2024' and tm.\"UTCDate\" >= s.\"StartDate\" and tm.\"UTCDate\" <= s.\"EndDate\" group by (pss.\"Pitcher\", pss.\"PitcherTeam\", pss.\"total_out_of_zone_pitches\", pss.\"total_in_zone_pitches\") ) select *, case when total_batters_faced = 0 then null else total_strikeouts_pitcher::decimal / total_batters_faced end as k_percentage, case when total_batters_faced = 0 then null else total_walks_pitcher::decimal / total_batters_faced end as base_on_ball_percentage from pitcher_stats_subquery; Query 3: Update batter functions drop function if exists get_batter_stats; create or replace function get_batter_stats(batter_name text, batter_team text, start_date date, end_date date) returns table(\"Batter\" varchar, \"BatterTeam\" varchar, \"hits\" bigint, \"at_bats\" bigint, \"strikes\" bigint, \"walks\" bigint, \"strikeouts\" bigint, \"homeruns\" bigint, \"extra_base_hits\" bigint, \"plate_appearances\" bigint, \"hit_by_pitch\" bigint, \"sacrifice\" bigint, \"total_bases\" bigint, \"on_base_percentage\" decimal, \"slugging_percentage\" decimal, \"chase_percentage\" decimal, \"in_zone_whiff_percentage\" decimal, \"games\" bigint, \"batting_average\" decimal, \"onbase_plus_slugging\" decimal, \"isolated_power\" decimal, \"k_percentage\" decimal, \"base_on_ball_percentage\" decimal) as $$ begin return query with at_bats_subquery as ( with hits_subquery as ( select tb.\"Batter\", tb.\"BatterTeam\", COUNT(*) filter (where \"PlayResult\" = 'Single' or \"PlayResult\" = 'Double' or \"PlayResult\" = 'Triple' or \"PlayResult\" = 'HomeRun' ) as hits, COUNT(*) filter (where \"PlayResult\" = 'Error' or \"PlayResult\" = 'Out' or \"PlayResult\" = 'FieldersChoice' or \"KorBB\" = 'Strikeout' or \"PlayResult\" = 'Single' or \"PlayResult\" = 'Double' or \"PlayResult\" = 'Triple' or \"PlayResult\" = 'HomeRun' ) as at_bats, COUNT(*) filter (where \"PlateLocHeight\" > 3.55 or \"PlateLocHeight\" < 1.77 or \"PlateLocSide\" > 0.86 or \"PlateLocSide\" < -0.86 ) as total_out_of_zone_pitches, COUNT(*) filter (where \"PlateLocHeight\" < 3.55 and \"PlateLocHeight\" > 1.77 and \"PlateLocSide\" < 0.86 and \"PlateLocSide\" > -0.86 ) as total_in_zone_pitches from trackman_metadata tm, trackman_batter tb, trackman_pitcher tp where tm.\"PitchUID\" = tb.\"PitchUID\" and tb.\"PitchUID\" = tp.\"PitchUID\" and tm.\"UTCDate\" >= start_date and tm.\"UTCDate\" <= end_date and tb.\"Batter\" = batter_name and tb.\"BatterTeam\" = batter_team group by (tb.\"Batter\", tb.\"BatterTeam\") ) select tb.\"Batter\" as \"Batter\", tb.\"BatterTeam\" as \"BatterTeam\", hs.\"hits\" as \"hits\", hs.\"at_bats\" as \"at_bats\", COUNT(*) filter (where \"PitchCall\" = 'StrikeCalled' or \"PitchCall\" = 'StrikeSwinging' or \"PitchCall\" = 'FoulBallNotFieldable' ) as strikes, COUNT(*) filter (where \"KorBB\" = 'Walk') as walks, COUNT(*) filter (where \"KorBB\" = 'Strikeout') as strikeouts, COUNT(*) filter (where \"PlayResult\" = 'HomeRun') as homeruns, COUNT(*) filter (where \"PlayResult\" = 'Double' or \"PlayResult\" = 'Triple' or \"PlayResult\" = 'HomeRun' ) as extra_base_hits, COUNT(*) filter (where \"KorBB\" = 'Walk' or \"PitchCall\" = 'InPlay' or \"PitchCall\" = 'HitByPitch' or \"KorBB\" = 'Strikeout' ) as plate_appearances, COUNT(*) filter (where \"PitchCall\" = 'HitByPitch') as hit_by_pitch, COUNT(*) filter (where \"PlayResult\" = 'Sacrifice') as sacrifice, SUM(case when \"PlayResult\" = 'Single' then 1 when \"PlayResult\" = 'Double' then 2 when \"PlayResult\" = 'Triple' then 3 when \"PlayResult\" = 'HomeRun' then 4 else 0 end) as total_bases, case when hs.\"at_bats\" = 0 then null else (hs.\"hits\" + COUNT(*) filter (where \"KorBB\" = 'Walk' or \"PitchCall\" = 'HitByPitch'))::decimal / (COUNT(*) filter (where \"PlayResult\" = 'Error' or \"PlayResult\" = 'Out' or \"PlayResult\" = 'FieldersChoice' or \"KorBB\" = 'Strikeout' ) + hs.\"hits\" + COUNT(*) filter (where \"KorBB\" = 'Walk' or \"PitchCall\" = 'HitByPitch') + COUNT(*) filter (where \"PlayResult\" = 'Sacrifice' and \"TaggedHitType\" = 'FlyBall')) end as on_base_percentage, case when hs.\"at_bats\" = 0 then null else SUM(case when \"PlayResult\" = 'Single' then 1 when \"PlayResult\" = 'Double' then 2 when \"PlayResult\" = 'Triple' then 3 when \"PlayResult\" = 'HomeRun' then 4 else 0 end)::decimal / hs.\"at_bats\" end as slugging_percentage, case when hs.\"total_out_of_zone_pitches\" = 0 then null else COUNT(*) filter (where (\"PitchCall\" = 'StrikeSwinging' or \"PitchCall\" = 'FoulBallNotFieldable' or \"PitchCall\" = 'InPlay') and (\"PlateLocHeight\" > 3.55 or \"PlateLocHeight\" < 1.77 or \"PlateLocSide\" > 0.86 or \"PlateLocSide\" < -0.86) )::decimal / hs.\"total_out_of_zone_pitches\" end as chase_percentage, case when hs.\"total_in_zone_pitches\" = 0 then null else COUNT(*) filter (where \"PitchCall\" = 'StrikeSwinging' and \"PlateLocHeight\" < 3.55 and \"PlateLocHeight\" > 1.77 and \"PlateLocSide\" < 0.86 and \"PlateLocSide\" > -0.86 )::decimal / hs.\"total_in_zone_pitches\" end as in_zone_whiff_percentage, COUNT(distinct \"GameUID\") as games from hits_subquery hs, trackman_batter tb, trackman_metadata tm, trackman_pitcher tp where hs.\"Batter\" = tb.\"Batter\" and hs.\"BatterTeam\" = tb.\"BatterTeam\" and tb.\"PitchUID\" = tm.\"PitchUID\" and tm.\"PitchUID\" = tp.\"PitchUID\" and tm.\"UTCDate\" >= start_date and tm.\"UTCDate\" <= end_date and tb.\"Batter\" = batter_name and tb.\"BatterTeam\" = batter_team group by (tb.\"Batter\", tb.\"BatterTeam\", hs.\"hits\", hs.\"at_bats\", hs.\"total_out_of_zone_pitches\", hs.\"total_in_zone_pitches\") ) select *, case when abs.\"at_bats\" = 0 then null else abs.\"hits\"::decimal / abs.\"at_bats\" end as batting_average, abs.\"on_base_percentage\" + abs.\"slugging_percentage\" as onbase_plus_slugging, abs.\"slugging_percentage\" - case when abs.\"at_bats\" = 0 then null else abs.\"hits\"::decimal / abs.\"at_bats\" end as isolated_power, case when abs.\"plate_appearances\" = 0 then null else abs.\"strikeouts\"::decimal / abs.\"plate_appearances\" end as k_percentage, case when abs.\"plate_appearances\" = 0 then null else abs.\"walks\"::decimal / abs.\"plate_appearances\" end as base_on_ball_percentage from at_bats_subquery abs; end; $$ language plpgsql; Query 4: Update pitcher functions drop function if exists get_pitcher_stats; create or replace function get_pitcher_stats(pitcher_name text, pitcher_team text, start_date date, end_date date) returns table(\"Pitcher\" varchar, \"PitcherTeam\" varchar, \"total_strikeouts_pitcher\" bigint, \"total_walks_pitcher\" bigint, \"total_out_of_zone_pitches\" bigint, \"misses_in_zone\" bigint, \"swings_in_zone\" bigint, \"total_num_chases\" bigint, \"pitches\" bigint, \"games\" bigint, \"games_started\" bigint, \"total_innings_pitched\" decimal, \"total_batters_faced\" bigint, \"in_zone_whiff_percentage\" decimal, \"chase_percentage\" decimal, \"k_percentage\" decimal, \"base_on_ball_percentage\" decimal) as $$ begin return query with pitcher_stats_subquery as ( with pitcher_stats_subquery_two as ( select tp.\"Pitcher\" as \"Pitcher\", tp.\"PitcherTeam\" as \"PitcherTeam\", COUNT(*) filter (where \"PlateLocHeight\" > 3.55 or \"PlateLocHeight\" < 1.77 or \"PlateLocSide\" > 0.86 or \"PlateLocSide\" < -0.86 ) as total_out_of_zone_pitches, COUNT(*) filter (where \"PlateLocHeight\" < 3.55 and \"PlateLocHeight\" > 1.77 and \"PlateLocSide\" < 0.86 and \"PlateLocSide\" > -0.86 ) as total_in_zone_pitches from trackman_batter tb, trackman_metadata tm, trackman_pitcher tp where tb.\"PitchUID\" = tm.\"PitchUID\" and tm.\"PitchUID\" = tp.\"PitchUID\" and tm.\"UTCDate\" >= start_date and tm.\"UTCDate\" <= end_date and tp.\"Pitcher\" = pitcher_name and tp.\"PitcherTeam\" = pitcher_team group by (tp.\"Pitcher\", tp.\"PitcherTeam\") ) select tp.\"Pitcher\" as \"Pitcher\", tp.\"PitcherTeam\" as \"PitcherTeam\", COUNT(*) filter (where \"KorBB\" = 'Strikeout') as total_strikeouts_pitcher, COUNT(*) filter (where \"KorBB\" = 'Walk') as total_walks_pitcher, COUNT(*) filter (where \"PlateLocHeight\" > 3.55 or \"PlateLocHeight\" < 1.77 or \"PlateLocSide\" > 0.86 or \"PlateLocSide\" < -0.86 ) as total_out_of_zone_pitches, COUNT(*) filter (where \"PitchCall\" = 'StrikeSwinging' and \"PlateLocHeight\" < 3.55 and \"PlateLocHeight\" > 1.77 and \"PlateLocSide\" < 0.86 and \"PlateLocSide\" > -0.86 ) as misses_in_zone, COUNT(*) filter (where \"PitchCall\" = 'StrikeSwinging' or \"PitchCall\" = 'FoulBallNotFieldable' or \"PitchCall\" = 'InPlay' and \"PlateLocHeight\" < 3.55 and \"PlateLocHeight\" > 1.77 and \"PlateLocSide\" < 0.86 and \"PlateLocSide\" > -0.86 ) as swings_in_zone, COUNT(*) filter (where \"PitchCall\" = 'StrikeSwinging' or \"PitchCall\" = 'FoulBallNotFieldable' and \"PlateLocHeight\" > 3.55 and \"PlateLocHeight\" < 1.77 and \"PlateLocSide\" > 0.86 and \"PlateLocSide\" < -0.86 ) as total_num_chases, COUNT(*) as pitches, COUNT(distinct \"GameUID\") as games, COUNT(*) filter (where \"Inning\" = 1 and \"Outs\" = 0 and \"Balls\" = 0 and \"Strikes\" = 0 and \"PAofInning\" = 1 ) as games_started, ROUND(((COUNT(*) filter (where \"KorBB\" = 'StrikeOut') + SUM(\"OutsOnPlay\"::integer)) / 3) + (((COUNT(*) filter (where \"KorBB\" = 'StrikeOut') + SUM(\"OutsOnPlay\"::integer)) % 3)::decimal / 10), 1) as total_innings_pitched, COUNT(distinct (\"PAofInning\", \"Inning\", \"Batter\", \"GameUID\")) as total_batters_faced, case when pss.\"total_in_zone_pitches\" = 0 then null else COUNT(*) filter (where \"PitchCall\" = 'StrikeSwinging' and \"PlateLocHeight\" < 3.55 and \"PlateLocHeight\" > 1.77 and \"PlateLocSide\" < 0.86 and \"PlateLocSide\" > -0.86 )::decimal / pss.\"total_in_zone_pitches\" end as in_zone_whiff_percentage, case when pss.\"total_out_of_zone_pitches\" = 0 then null else COUNT(*) filter (where (\"PitchCall\" = 'StrikeSwinging' or \"PitchCall\" = 'FoulBallNotFieldable' or \"PitchCall\" = 'InPlay') and (\"PlateLocHeight\" > 3.55 or \"PlateLocHeight\" < 1.77 or \"PlateLocSide\" > 0.86 or \"PlateLocSide\" < -0.86) )::decimal / pss.\"total_out_of_zone_pitches\" end as chase_percentage from pitcher_stats_subquery_two pss, trackman_metadata tm, trackman_pitcher tp, trackman_batter tb where pss.\"Pitcher\" = tp.\"Pitcher\" and pss.\"PitcherTeam\" = tp.\"PitcherTeam\" and tm.\"PitchUID\" = tp.\"PitchUID\" and tm.\"PitchUID\" = tb.\"PitchUID\" and tm.\"UTCDate\" >= start_date and tm.\"UTCDate\" <= end_date and tp.\"Pitcher\" = pitcher_name and tp.\"PitcherTeam\" = pitcher_team group by (tp.\"Pitcher\", tp.\"PitcherTeam\", pss.\"total_out_of_zone_pitches\", pss.\"total_in_zone_pitches\") ) select *, case when ps.\"total_batters_faced\" = 0 then null else ps.\"total_strikeouts_pitcher\"::decimal / ps.\"total_batters_faced\" end as k_percentage, case when ps.\"total_batters_faced\" = 0 then null else ps.\"total_walks_pitcher\"::decimal / ps.\"total_batters_faced\" end as base_on_ball_percentage from pitcher_stats_subquery ps; end; $$ language plpgsql;","title":"Database Update Instructions"},{"location":"DB-Update-Instructions/#database-update-instructions","text":"This document provides step-by-step instructions on how to update the database using pgAdmin or any other SQL query tool. Follow the steps below to execute the provided SQL queries.","title":"Database Update Instructions"},{"location":"DB-Update-Instructions/#prerequisites","text":"Before proceeding, ensure you have the following: 1. Access to the database via pgAdmin or another SQL query tool. 2. Necessary permissions to execute UPDATE , INSERT , or DELETE queries. 3. A backup of the database (recommended before making changes).","title":"Prerequisites"},{"location":"DB-Update-Instructions/#steps-to-update-the-database","text":"","title":"Steps to Update the Database"},{"location":"DB-Update-Instructions/#1-connect-to-the-database","text":"Open pgAdmin or your preferred SQL query tool. Connect to the target database using your credentials.","title":"1. Connect to the Database"},{"location":"DB-Update-Instructions/#2-open-the-query-tool","text":"Navigate to the database you want to update. Open the Query Tool (in pgAdmin, right-click the database and select Query Tool ).","title":"2. Open the Query Tool"},{"location":"DB-Update-Instructions/#3-execute-the-sql-queries","text":"Copy and paste the following 4 SQL queries into the query tool and execute them one at a time.","title":"3. Execute the SQL Queries"},{"location":"DB-Update-Instructions/#query-1-update-batter-view","text":"drop view if exists batter_stats_view_2024; create or replace view batter_stats_view_2024 as with at_bats_subquery as ( with hits_subquery as ( select \"Batter\", \"BatterTeam\", COUNT(*) filter (where \"PlayResult\" = 'Single' or \"PlayResult\" = 'Double' or \"PlayResult\" = 'Triple' or \"PlayResult\" = 'HomeRun' ) as hits, COUNT(*) filter (where \"PlayResult\" = 'Error' or \"PlayResult\" = 'Out' or \"PlayResult\" = 'FieldersChoice' or \"KorBB\" = 'Strikeout' or \"PlayResult\" = 'Single' or \"PlayResult\" = 'Double' or \"PlayResult\" = 'Triple' or \"PlayResult\" = 'HomeRun' ) as at_bats, COUNT(*) filter (where \"PlateLocHeight\" > 3.55 or \"PlateLocHeight\" < 1.77 or \"PlateLocSide\" > 0.86 or \"PlateLocSide\" < -0.86 ) as total_out_of_zone_pitches, COUNT(*) filter (where \"PlateLocHeight\" < 3.55 and \"PlateLocHeight\" > 1.77 and \"PlateLocSide\" < 0.86 and \"PlateLocSide\" > -0.86 ) as total_in_zone_pitches from trackman_metadata tm, trackman_batter tb, trackman_pitcher tp, seasons s where tm.\"PitchUID\" = tb.\"PitchUID\" and tb.\"PitchUID\" = tp.\"PitchUID\" and s.\"SeasonTitle\" = '2024' and tm.\"UTCDate\" >= s.\"StartDate\" and tm.\"UTCDate\" <= s.\"EndDate\" group by (\"Batter\", \"BatterTeam\") ) select tb.\"Batter\" as \"Batter\", tb.\"BatterTeam\" as \"BatterTeam\", hs.\"hits\" as \"hits\", hs.\"at_bats\" as \"at_bats\", COUNT(*) filter (where \"PitchCall\" = 'StrikeCalled' or \"PitchCall\" = 'StrikeSwinging' or \"PitchCall\" = 'FoulBallNotFieldable' ) as strikes, COUNT(*) filter (where \"KorBB\" = 'Walk') as walks, COUNT(*) filter (where \"KorBB\" = 'Strikeout') as strikeouts, COUNT(*) filter (where \"PlayResult\" = 'HomeRun') as homeruns, COUNT(*) filter (where \"PlayResult\" = 'Double' or \"PlayResult\" = 'Triple' or \"PlayResult\" = 'HomeRun' ) as extra_base_hits, COUNT(*) filter (where \"KorBB\" = 'Walk' or \"PitchCall\" = 'InPlay' or \"PitchCall\" = 'HitByPitch' or \"KorBB\" = 'Strikeout' ) as plate_appearances, COUNT(*) filter (where \"PitchCall\" = 'HitByPitch') as hit_by_pitch, COUNT(*) filter (where \"PlayResult\" = 'Sacrifice') as sacrifice, SUM(case when \"PlayResult\" = 'Single' then 1 when \"PlayResult\" = 'Double' then 2 when \"PlayResult\" = 'Triple' then 3 when \"PlayResult\" = 'HomeRun' then 4 else 0 end) as total_bases, case when at_bats = 0 then null else (hits + COUNT(*) filter (where \"KorBB\" = 'Walk' or \"PitchCall\" = 'HitByPitch'))::decimal / (COUNT(*) filter (where \"PlayResult\" = 'Error' or \"PlayResult\" = 'Out' or \"PlayResult\" = 'FieldersChoice' or \"KorBB\" = 'Strikeout' ) + hits + COUNT(*) filter (where \"KorBB\" = 'Walk' or \"PitchCall\" = 'HitByPitch') + COUNT(*) filter (where \"PlayResult\" = 'Sacrifice' and \"TaggedHitType\" = 'FlyBall')) end as on_base_percentage, case when at_bats = 0 then null else SUM(case when \"PlayResult\" = 'Single' then 1 when \"PlayResult\" = 'Double' then 2 when \"PlayResult\" = 'Triple' then 3 when \"PlayResult\" = 'HomeRun' then 4 else 0 end)::decimal / at_bats end as slugging_percentage, case when total_out_of_zone_pitches = 0 then null else COUNT(*) filter (where (\"PitchCall\" = 'StrikeSwinging' or \"PitchCall\" = 'FoulBallNotFieldable' or \"PitchCall\" = 'InPlay') and (\"PlateLocHeight\" > 3.55 or \"PlateLocHeight\" < 1.77 or \"PlateLocSide\" > 0.86 or \"PlateLocSide\" < -0.86) )::decimal / total_out_of_zone_pitches end as chase_percentage, case when total_in_zone_pitches = 0 then null else COUNT(*) filter (where \"PitchCall\" = 'StrikeSwinging' and \"PlateLocHeight\" < 3.55 and \"PlateLocHeight\" > 1.77 and \"PlateLocSide\" < 0.86 and \"PlateLocSide\" > -0.86 )::decimal / total_in_zone_pitches end as in_zone_whiff_percentage, COUNT(distinct \"GameUID\") as games from hits_subquery hs, trackman_batter tb, trackman_metadata tm, trackman_pitcher tp, seasons s where hs.\"Batter\" = tb.\"Batter\" and hs.\"BatterTeam\" = tb.\"BatterTeam\" and tb.\"PitchUID\" = tm.\"PitchUID\" and tm.\"PitchUID\" = tp.\"PitchUID\" and s.\"SeasonTitle\" = '2024' and tm.\"UTCDate\" >= s.\"StartDate\" and tm.\"UTCDate\" <= s.\"EndDate\" group by (tb.\"Batter\", tb.\"BatterTeam\", hs.\"hits\", hs.\"at_bats\", hs.\"total_out_of_zone_pitches\", hs.\"total_in_zone_pitches\") ) select *, case when at_bats = 0 then null else hits::decimal / at_bats end as batting_average, on_base_percentage + slugging_percentage as onbase_plus_slugging, slugging_percentage - case when at_bats = 0 then null else hits::decimal / at_bats end as isolated_power, case when plate_appearances = 0 then null else strikeouts::decimal / plate_appearances end as k_percentage, case when plate_appearances = 0 then null else walks::decimal / plate_appearances end as base_on_ball_percentage from at_bats_subquery;","title":"Query 1: Update batter view"},{"location":"DB-Update-Instructions/#query-2-update-pitcher-view","text":"drop view if exists pitcher_stats_view_2024; create or replace view pitcher_stats_view_2024 as with pitcher_stats_subquery as ( with pitcher_stats_subquery_two as ( select tp2.\"Pitcher\" as \"Pitcher\", tp2.\"PitcherTeam\" as \"PitcherTeam\", COUNT(*) filter (where \"PlateLocHeight\" > 3.55 or \"PlateLocHeight\" < 1.77 or \"PlateLocSide\" > 0.86 or \"PlateLocSide\" < -0.86 ) as total_out_of_zone_pitches, COUNT(*) filter (where \"PlateLocHeight\" < 3.55 and \"PlateLocHeight\" > 1.77 and \"PlateLocSide\" < 0.86 and \"PlateLocSide\" > -0.86 ) as total_in_zone_pitches from trackman_batter tb2, trackman_metadata tm2, trackman_pitcher tp2, seasons s2 where tb2.\"PitchUID\" = tm2.\"PitchUID\" and tm2.\"PitchUID\" = tp2.\"PitchUID\" and s2.\"SeasonTitle\" = '2024' and tm2.\"UTCDate\" >= s2.\"StartDate\" and tm2.\"UTCDate\" <= s2.\"EndDate\" group by (tp2.\"Pitcher\", tp2.\"PitcherTeam\") ) select pss.\"Pitcher\" as \"Pitcher\", pss.\"PitcherTeam\" as \"PitcherTeam\", COUNT(*) filter (where \"KorBB\" = 'Strikeout') as total_strikeouts_pitcher, COUNT(*) filter (where \"KorBB\" = 'Walk') as total_walks_pitcher, COUNT(*) filter (where \"PlateLocHeight\" > 3.55 or \"PlateLocHeight\" < 1.77 or \"PlateLocSide\" > 0.86 or \"PlateLocSide\" < -0.86 ) as total_out_of_zone_pitches, COUNT(*) filter (where \"PitchCall\" = 'StrikeSwinging' and \"PlateLocHeight\" < 3.55 and \"PlateLocHeight\" > 1.77 and \"PlateLocSide\" < 0.86 and \"PlateLocSide\" > -0.86 ) as misses_in_zone, COUNT(*) filter (where \"PitchCall\" = 'StrikeSwinging' or \"PitchCall\" = 'FoulBallNotFieldable' or \"PitchCall\" = 'InPlay' and \"PlateLocHeight\" < 3.55 and \"PlateLocHeight\" > 1.77 and \"PlateLocSide\" < 0.86 and \"PlateLocSide\" > -0.86 ) as swings_in_zone, COUNT(*) filter (where \"PitchCall\" = 'StrikeSwinging' or \"PitchCall\" = 'FoulBallNotFieldable' and \"PlateLocHeight\" > 3.55 and \"PlateLocHeight\" < 1.77 and \"PlateLocSide\" > 0.86 and \"PlateLocSide\" < -0.86 ) as total_num_chases, COUNT(*) as pitches, COUNT(distinct \"GameUID\") as games, COUNT(*) filter (where \"Inning\" = 1 and \"Outs\" = 0 and \"Balls\" = 0 and \"Strikes\" = 0 and \"PAofInning\" = 1 ) as games_started, ROUND(((COUNT(*) filter (where \"KorBB\" = 'StrikeOut') + SUM(\"OutsOnPlay\"::integer)) / 3) + (((COUNT(*) filter (where \"KorBB\" = 'StrikeOut') + SUM(\"OutsOnPlay\"::integer)) % 3)::decimal / 10), 1) as total_innings_pitched, COUNT(distinct (\"PAofInning\", \"Inning\", \"Batter\", \"GameUID\")) as total_batters_faced, case when total_in_zone_pitches = 0 then null else COUNT(*) filter (where \"PitchCall\" = 'StrikeSwinging' and \"PlateLocHeight\" < 3.55 and \"PlateLocHeight\" > 1.77 and \"PlateLocSide\" < 0.86 and \"PlateLocSide\" > -0.86 )::decimal / total_in_zone_pitches end as in_zone_whiff_percentage, case when total_out_of_zone_pitches = 0 then null else COUNT(*) filter (where (\"PitchCall\" = 'StrikeSwinging' or \"PitchCall\" = 'FoulBallNotFieldable' or \"PitchCall\" = 'InPlay') and (\"PlateLocHeight\" > 3.55 or \"PlateLocHeight\" < 1.77 or \"PlateLocSide\" > 0.86 or \"PlateLocSide\" < -0.86) )::decimal / total_out_of_zone_pitches end as chase_percentage from pitcher_stats_subquery_two pss, trackman_metadata tm, trackman_pitcher tp, trackman_batter tb, seasons s where pss.\"Pitcher\" = tp.\"Pitcher\" and pss.\"PitcherTeam\" = tp.\"PitcherTeam\" and tm.\"PitchUID\" = tp.\"PitchUID\" and tm.\"PitchUID\" = tb.\"PitchUID\" and s.\"SeasonTitle\" = '2024' and tm.\"UTCDate\" >= s.\"StartDate\" and tm.\"UTCDate\" <= s.\"EndDate\" group by (pss.\"Pitcher\", pss.\"PitcherTeam\", pss.\"total_out_of_zone_pitches\", pss.\"total_in_zone_pitches\") ) select *, case when total_batters_faced = 0 then null else total_strikeouts_pitcher::decimal / total_batters_faced end as k_percentage, case when total_batters_faced = 0 then null else total_walks_pitcher::decimal / total_batters_faced end as base_on_ball_percentage from pitcher_stats_subquery;","title":"Query 2: Update pitcher view"},{"location":"DB-Update-Instructions/#query-3-update-batter-functions","text":"drop function if exists get_batter_stats; create or replace function get_batter_stats(batter_name text, batter_team text, start_date date, end_date date) returns table(\"Batter\" varchar, \"BatterTeam\" varchar, \"hits\" bigint, \"at_bats\" bigint, \"strikes\" bigint, \"walks\" bigint, \"strikeouts\" bigint, \"homeruns\" bigint, \"extra_base_hits\" bigint, \"plate_appearances\" bigint, \"hit_by_pitch\" bigint, \"sacrifice\" bigint, \"total_bases\" bigint, \"on_base_percentage\" decimal, \"slugging_percentage\" decimal, \"chase_percentage\" decimal, \"in_zone_whiff_percentage\" decimal, \"games\" bigint, \"batting_average\" decimal, \"onbase_plus_slugging\" decimal, \"isolated_power\" decimal, \"k_percentage\" decimal, \"base_on_ball_percentage\" decimal) as $$ begin return query with at_bats_subquery as ( with hits_subquery as ( select tb.\"Batter\", tb.\"BatterTeam\", COUNT(*) filter (where \"PlayResult\" = 'Single' or \"PlayResult\" = 'Double' or \"PlayResult\" = 'Triple' or \"PlayResult\" = 'HomeRun' ) as hits, COUNT(*) filter (where \"PlayResult\" = 'Error' or \"PlayResult\" = 'Out' or \"PlayResult\" = 'FieldersChoice' or \"KorBB\" = 'Strikeout' or \"PlayResult\" = 'Single' or \"PlayResult\" = 'Double' or \"PlayResult\" = 'Triple' or \"PlayResult\" = 'HomeRun' ) as at_bats, COUNT(*) filter (where \"PlateLocHeight\" > 3.55 or \"PlateLocHeight\" < 1.77 or \"PlateLocSide\" > 0.86 or \"PlateLocSide\" < -0.86 ) as total_out_of_zone_pitches, COUNT(*) filter (where \"PlateLocHeight\" < 3.55 and \"PlateLocHeight\" > 1.77 and \"PlateLocSide\" < 0.86 and \"PlateLocSide\" > -0.86 ) as total_in_zone_pitches from trackman_metadata tm, trackman_batter tb, trackman_pitcher tp where tm.\"PitchUID\" = tb.\"PitchUID\" and tb.\"PitchUID\" = tp.\"PitchUID\" and tm.\"UTCDate\" >= start_date and tm.\"UTCDate\" <= end_date and tb.\"Batter\" = batter_name and tb.\"BatterTeam\" = batter_team group by (tb.\"Batter\", tb.\"BatterTeam\") ) select tb.\"Batter\" as \"Batter\", tb.\"BatterTeam\" as \"BatterTeam\", hs.\"hits\" as \"hits\", hs.\"at_bats\" as \"at_bats\", COUNT(*) filter (where \"PitchCall\" = 'StrikeCalled' or \"PitchCall\" = 'StrikeSwinging' or \"PitchCall\" = 'FoulBallNotFieldable' ) as strikes, COUNT(*) filter (where \"KorBB\" = 'Walk') as walks, COUNT(*) filter (where \"KorBB\" = 'Strikeout') as strikeouts, COUNT(*) filter (where \"PlayResult\" = 'HomeRun') as homeruns, COUNT(*) filter (where \"PlayResult\" = 'Double' or \"PlayResult\" = 'Triple' or \"PlayResult\" = 'HomeRun' ) as extra_base_hits, COUNT(*) filter (where \"KorBB\" = 'Walk' or \"PitchCall\" = 'InPlay' or \"PitchCall\" = 'HitByPitch' or \"KorBB\" = 'Strikeout' ) as plate_appearances, COUNT(*) filter (where \"PitchCall\" = 'HitByPitch') as hit_by_pitch, COUNT(*) filter (where \"PlayResult\" = 'Sacrifice') as sacrifice, SUM(case when \"PlayResult\" = 'Single' then 1 when \"PlayResult\" = 'Double' then 2 when \"PlayResult\" = 'Triple' then 3 when \"PlayResult\" = 'HomeRun' then 4 else 0 end) as total_bases, case when hs.\"at_bats\" = 0 then null else (hs.\"hits\" + COUNT(*) filter (where \"KorBB\" = 'Walk' or \"PitchCall\" = 'HitByPitch'))::decimal / (COUNT(*) filter (where \"PlayResult\" = 'Error' or \"PlayResult\" = 'Out' or \"PlayResult\" = 'FieldersChoice' or \"KorBB\" = 'Strikeout' ) + hs.\"hits\" + COUNT(*) filter (where \"KorBB\" = 'Walk' or \"PitchCall\" = 'HitByPitch') + COUNT(*) filter (where \"PlayResult\" = 'Sacrifice' and \"TaggedHitType\" = 'FlyBall')) end as on_base_percentage, case when hs.\"at_bats\" = 0 then null else SUM(case when \"PlayResult\" = 'Single' then 1 when \"PlayResult\" = 'Double' then 2 when \"PlayResult\" = 'Triple' then 3 when \"PlayResult\" = 'HomeRun' then 4 else 0 end)::decimal / hs.\"at_bats\" end as slugging_percentage, case when hs.\"total_out_of_zone_pitches\" = 0 then null else COUNT(*) filter (where (\"PitchCall\" = 'StrikeSwinging' or \"PitchCall\" = 'FoulBallNotFieldable' or \"PitchCall\" = 'InPlay') and (\"PlateLocHeight\" > 3.55 or \"PlateLocHeight\" < 1.77 or \"PlateLocSide\" > 0.86 or \"PlateLocSide\" < -0.86) )::decimal / hs.\"total_out_of_zone_pitches\" end as chase_percentage, case when hs.\"total_in_zone_pitches\" = 0 then null else COUNT(*) filter (where \"PitchCall\" = 'StrikeSwinging' and \"PlateLocHeight\" < 3.55 and \"PlateLocHeight\" > 1.77 and \"PlateLocSide\" < 0.86 and \"PlateLocSide\" > -0.86 )::decimal / hs.\"total_in_zone_pitches\" end as in_zone_whiff_percentage, COUNT(distinct \"GameUID\") as games from hits_subquery hs, trackman_batter tb, trackman_metadata tm, trackman_pitcher tp where hs.\"Batter\" = tb.\"Batter\" and hs.\"BatterTeam\" = tb.\"BatterTeam\" and tb.\"PitchUID\" = tm.\"PitchUID\" and tm.\"PitchUID\" = tp.\"PitchUID\" and tm.\"UTCDate\" >= start_date and tm.\"UTCDate\" <= end_date and tb.\"Batter\" = batter_name and tb.\"BatterTeam\" = batter_team group by (tb.\"Batter\", tb.\"BatterTeam\", hs.\"hits\", hs.\"at_bats\", hs.\"total_out_of_zone_pitches\", hs.\"total_in_zone_pitches\") ) select *, case when abs.\"at_bats\" = 0 then null else abs.\"hits\"::decimal / abs.\"at_bats\" end as batting_average, abs.\"on_base_percentage\" + abs.\"slugging_percentage\" as onbase_plus_slugging, abs.\"slugging_percentage\" - case when abs.\"at_bats\" = 0 then null else abs.\"hits\"::decimal / abs.\"at_bats\" end as isolated_power, case when abs.\"plate_appearances\" = 0 then null else abs.\"strikeouts\"::decimal / abs.\"plate_appearances\" end as k_percentage, case when abs.\"plate_appearances\" = 0 then null else abs.\"walks\"::decimal / abs.\"plate_appearances\" end as base_on_ball_percentage from at_bats_subquery abs; end; $$ language plpgsql;","title":"Query 3: Update batter functions"},{"location":"DB-Update-Instructions/#query-4-update-pitcher-functions","text":"drop function if exists get_pitcher_stats; create or replace function get_pitcher_stats(pitcher_name text, pitcher_team text, start_date date, end_date date) returns table(\"Pitcher\" varchar, \"PitcherTeam\" varchar, \"total_strikeouts_pitcher\" bigint, \"total_walks_pitcher\" bigint, \"total_out_of_zone_pitches\" bigint, \"misses_in_zone\" bigint, \"swings_in_zone\" bigint, \"total_num_chases\" bigint, \"pitches\" bigint, \"games\" bigint, \"games_started\" bigint, \"total_innings_pitched\" decimal, \"total_batters_faced\" bigint, \"in_zone_whiff_percentage\" decimal, \"chase_percentage\" decimal, \"k_percentage\" decimal, \"base_on_ball_percentage\" decimal) as $$ begin return query with pitcher_stats_subquery as ( with pitcher_stats_subquery_two as ( select tp.\"Pitcher\" as \"Pitcher\", tp.\"PitcherTeam\" as \"PitcherTeam\", COUNT(*) filter (where \"PlateLocHeight\" > 3.55 or \"PlateLocHeight\" < 1.77 or \"PlateLocSide\" > 0.86 or \"PlateLocSide\" < -0.86 ) as total_out_of_zone_pitches, COUNT(*) filter (where \"PlateLocHeight\" < 3.55 and \"PlateLocHeight\" > 1.77 and \"PlateLocSide\" < 0.86 and \"PlateLocSide\" > -0.86 ) as total_in_zone_pitches from trackman_batter tb, trackman_metadata tm, trackman_pitcher tp where tb.\"PitchUID\" = tm.\"PitchUID\" and tm.\"PitchUID\" = tp.\"PitchUID\" and tm.\"UTCDate\" >= start_date and tm.\"UTCDate\" <= end_date and tp.\"Pitcher\" = pitcher_name and tp.\"PitcherTeam\" = pitcher_team group by (tp.\"Pitcher\", tp.\"PitcherTeam\") ) select tp.\"Pitcher\" as \"Pitcher\", tp.\"PitcherTeam\" as \"PitcherTeam\", COUNT(*) filter (where \"KorBB\" = 'Strikeout') as total_strikeouts_pitcher, COUNT(*) filter (where \"KorBB\" = 'Walk') as total_walks_pitcher, COUNT(*) filter (where \"PlateLocHeight\" > 3.55 or \"PlateLocHeight\" < 1.77 or \"PlateLocSide\" > 0.86 or \"PlateLocSide\" < -0.86 ) as total_out_of_zone_pitches, COUNT(*) filter (where \"PitchCall\" = 'StrikeSwinging' and \"PlateLocHeight\" < 3.55 and \"PlateLocHeight\" > 1.77 and \"PlateLocSide\" < 0.86 and \"PlateLocSide\" > -0.86 ) as misses_in_zone, COUNT(*) filter (where \"PitchCall\" = 'StrikeSwinging' or \"PitchCall\" = 'FoulBallNotFieldable' or \"PitchCall\" = 'InPlay' and \"PlateLocHeight\" < 3.55 and \"PlateLocHeight\" > 1.77 and \"PlateLocSide\" < 0.86 and \"PlateLocSide\" > -0.86 ) as swings_in_zone, COUNT(*) filter (where \"PitchCall\" = 'StrikeSwinging' or \"PitchCall\" = 'FoulBallNotFieldable' and \"PlateLocHeight\" > 3.55 and \"PlateLocHeight\" < 1.77 and \"PlateLocSide\" > 0.86 and \"PlateLocSide\" < -0.86 ) as total_num_chases, COUNT(*) as pitches, COUNT(distinct \"GameUID\") as games, COUNT(*) filter (where \"Inning\" = 1 and \"Outs\" = 0 and \"Balls\" = 0 and \"Strikes\" = 0 and \"PAofInning\" = 1 ) as games_started, ROUND(((COUNT(*) filter (where \"KorBB\" = 'StrikeOut') + SUM(\"OutsOnPlay\"::integer)) / 3) + (((COUNT(*) filter (where \"KorBB\" = 'StrikeOut') + SUM(\"OutsOnPlay\"::integer)) % 3)::decimal / 10), 1) as total_innings_pitched, COUNT(distinct (\"PAofInning\", \"Inning\", \"Batter\", \"GameUID\")) as total_batters_faced, case when pss.\"total_in_zone_pitches\" = 0 then null else COUNT(*) filter (where \"PitchCall\" = 'StrikeSwinging' and \"PlateLocHeight\" < 3.55 and \"PlateLocHeight\" > 1.77 and \"PlateLocSide\" < 0.86 and \"PlateLocSide\" > -0.86 )::decimal / pss.\"total_in_zone_pitches\" end as in_zone_whiff_percentage, case when pss.\"total_out_of_zone_pitches\" = 0 then null else COUNT(*) filter (where (\"PitchCall\" = 'StrikeSwinging' or \"PitchCall\" = 'FoulBallNotFieldable' or \"PitchCall\" = 'InPlay') and (\"PlateLocHeight\" > 3.55 or \"PlateLocHeight\" < 1.77 or \"PlateLocSide\" > 0.86 or \"PlateLocSide\" < -0.86) )::decimal / pss.\"total_out_of_zone_pitches\" end as chase_percentage from pitcher_stats_subquery_two pss, trackman_metadata tm, trackman_pitcher tp, trackman_batter tb where pss.\"Pitcher\" = tp.\"Pitcher\" and pss.\"PitcherTeam\" = tp.\"PitcherTeam\" and tm.\"PitchUID\" = tp.\"PitchUID\" and tm.\"PitchUID\" = tb.\"PitchUID\" and tm.\"UTCDate\" >= start_date and tm.\"UTCDate\" <= end_date and tp.\"Pitcher\" = pitcher_name and tp.\"PitcherTeam\" = pitcher_team group by (tp.\"Pitcher\", tp.\"PitcherTeam\", pss.\"total_out_of_zone_pitches\", pss.\"total_in_zone_pitches\") ) select *, case when ps.\"total_batters_faced\" = 0 then null else ps.\"total_strikeouts_pitcher\"::decimal / ps.\"total_batters_faced\" end as k_percentage, case when ps.\"total_batters_faced\" = 0 then null else ps.\"total_walks_pitcher\"::decimal / ps.\"total_batters_faced\" end as base_on_ball_percentage from pitcher_stats_subquery ps; end; $$ language plpgsql;","title":"Query 4: Update pitcher functions"},{"location":"Dependency-Updates/","text":"Updating Dependency Usage In the back-end of this project we utilize several different Python packages throughout our scripts. In order to avoid dependency issues from platform to platform, (whether that be for each dev's local instance or simply for our production environment), we keep a requirements.txt file within the csvparser directory containing all packages and versions utilizes. Below is a step by step guide to follow for both new contributors or existing contributors such that everything stays constant across our project. For New Contributors / New Versions For this section, you ideally are someone who is working with the Python scripts on the back-end (locally) for the first time, or are working on a version / branch of the project that you have not worked in yet. This will ensure that you get the correct packages and versions installed. 1. Setup local virtual environment The below instructions are written in the context of the directory setup as of 2/12/25. If reorganized by the time this wiki is being used, interpret the any references to the. folder \"csvparser\" or its subsequent child directories as which ever folders contain all of the Python related back-end. If you have yet to create a venv for this project, click here for quick instructions. To begin, you need to source you virtual environment (if not already done): MacOS (zsh): source venv-name/bin/activate Once your terminal prompt has (venv-name) appended to the beginning, then you know you are within the venv. Navigate to back-end directory Once you have the venv sourced, you need to navigate to the directory within the project that contains the requirements.txt file, assuming you are starting from the base directory ~/datagetta : cd csvparser Install the correct package dependencies Once you are in the correct directory, you are ready to install the correct package versions into your venv. Assuming you already have Python and pip installed, run the following command to install all packages in one shot: pip3 install -r requirements.txt Assuming no errors have occurred, you will see all of the packages begin to install in your terminal environment. If any version errors are encountered, please ensure you have the correct requirements.txt for your branch. For Current Dev's and Contributors For the following, it is assumed that you have already been working with this environment, and have, for whatever reason, installed new packages to be used with the project. Ensure you are in correct directory It is imperative that you ensure you are back in the same directory as the requirements.txt file. This is just a step to make sure you are not still in the src/ directory. The correct directory is: ~/datagetta/csvparser . Freeze the current dependencies to the requirements file Run the following pip command in terminal to correctly update the requirements.txt file: pip3 freeze > requirements.txt After this, you should not see anything else outputted into the terminal besides your usual prompt. You are now ready to commit your changes, assuming everything works.","title":"Updating Dependency Usage"},{"location":"Dependency-Updates/#updating-dependency-usage","text":"In the back-end of this project we utilize several different Python packages throughout our scripts. In order to avoid dependency issues from platform to platform, (whether that be for each dev's local instance or simply for our production environment), we keep a requirements.txt file within the csvparser directory containing all packages and versions utilizes. Below is a step by step guide to follow for both new contributors or existing contributors such that everything stays constant across our project.","title":"Updating Dependency Usage"},{"location":"Dependency-Updates/#for-new-contributors-new-versions","text":"For this section, you ideally are someone who is working with the Python scripts on the back-end (locally) for the first time, or are working on a version / branch of the project that you have not worked in yet. This will ensure that you get the correct packages and versions installed.","title":"For New Contributors / New Versions"},{"location":"Dependency-Updates/#1-setup-local-virtual-environment","text":"The below instructions are written in the context of the directory setup as of 2/12/25. If reorganized by the time this wiki is being used, interpret the any references to the. folder \"csvparser\" or its subsequent child directories as which ever folders contain all of the Python related back-end. If you have yet to create a venv for this project, click here for quick instructions. To begin, you need to source you virtual environment (if not already done): MacOS (zsh): source venv-name/bin/activate Once your terminal prompt has (venv-name) appended to the beginning, then you know you are within the venv.","title":"1. Setup local virtual environment"},{"location":"Dependency-Updates/#navigate-to-back-end-directory","text":"Once you have the venv sourced, you need to navigate to the directory within the project that contains the requirements.txt file, assuming you are starting from the base directory ~/datagetta : cd csvparser","title":"Navigate to back-end directory"},{"location":"Dependency-Updates/#install-the-correct-package-dependencies","text":"Once you are in the correct directory, you are ready to install the correct package versions into your venv. Assuming you already have Python and pip installed, run the following command to install all packages in one shot: pip3 install -r requirements.txt Assuming no errors have occurred, you will see all of the packages begin to install in your terminal environment. If any version errors are encountered, please ensure you have the correct requirements.txt for your branch.","title":"Install the correct package dependencies"},{"location":"Dependency-Updates/#for-current-devs-and-contributors","text":"For the following, it is assumed that you have already been working with this environment, and have, for whatever reason, installed new packages to be used with the project.","title":"For Current Dev's and Contributors"},{"location":"Dependency-Updates/#ensure-you-are-in-correct-directory","text":"It is imperative that you ensure you are back in the same directory as the requirements.txt file. This is just a step to make sure you are not still in the src/ directory. The correct directory is: ~/datagetta/csvparser .","title":"Ensure you are in correct directory"},{"location":"Dependency-Updates/#freeze-the-current-dependencies-to-the-requirements-file","text":"Run the following pip command in terminal to correctly update the requirements.txt file: pip3 freeze > requirements.txt After this, you should not see anything else outputted into the terminal besides your usual prompt. You are now ready to commit your changes, assuming everything works.","title":"Freeze the current dependencies to the requirements file"},{"location":"Deployment-Procedure/","text":"Deploying New Changes to Production With the newly deployed production environment, we have successfully setup a Github Self-Hosted Runner on the OIT provided VM such that with every PR that is merged or change pushed to main a our actions script is triggered. Self Hosted Runner Overview By using a Self-Hosted Runner , we avoid the minute limitations and potential costs that are associated with GitHub runners, by leveraging the Ubuntu server that we have been provided with. The current runner is connected to the account of tyler-teufel at the time of the writing of this document, and is directly connected to this repository. For instructions on how this Self Hosted Runner was setup, see the following: Youtube Tutorial GitHub Gist Tutorial Post Following the following tutorials can provide some insight into how everything is setup. Secrets In terms of the secrets that are traditionally utilized within a .env file for local development, we store them within the actions secrets within the repository. If you navigate to the repository settings and head to the 'secrets & variables' tab, and then select 'actions', you can add or modify any secrets needed. The secrets are then routed utilizing injection code within both the production.yml actions script, as well as the docker-compose.yaml file. These secrets are first accessed from the repository using secrets.SECRET_NAME under the env: section of the actions script. To ensure these variables can be used within all run steps, inject this within the deploy: section right after the line showing runs-on: self-hosted . Doing this allows for each subsequent job to have access the all of the variables within the environment itself. From here, think of the variables as being injected at runtime into the project environment. The next step is to inject these into the docker-compose.yaml file. Due to the way Docker is setup, it automatically tries to look for a .env file in the environment for the secrets. Since there is not one in this setup, we need to utilize an intuitive workaround that does not intervene with our docker-compose.override.yaml file we use for local development. This can be done by creating a section within the docker-compose.yaml file called x-common-env that would contain environmental variable injections that can be used as if it were in fact the contents of a .env file. By including this object within each container using the environment: <<: *common-env syntax in each containers configuration, we successfully allow for these secrets to now exist in the projects environment. Deployment Triggers Our current deployment script is configured to act as soon as a PR is successfully merged into the main branch. Currently, for good practice, we have all PRs to main requiring at least one review before allowing them to be merged directly to the branch. We also have added branch protection preventing any deletion of the branch, as well as pushing commit directly to main. Any commits to main trigger the action to run, which consist of first granting necessary modification permissions to the directory of the project. Next, the docker containers are then confirmed to build. Following this, any existing containers are shut down, followed by the redeployment of the newly modified containers.","title":"Deploying New Changes to Production"},{"location":"Deployment-Procedure/#deploying-new-changes-to-production","text":"With the newly deployed production environment, we have successfully setup a Github Self-Hosted Runner on the OIT provided VM such that with every PR that is merged or change pushed to main a our actions script is triggered.","title":"Deploying New Changes to Production"},{"location":"Deployment-Procedure/#self-hosted-runner-overview","text":"By using a Self-Hosted Runner , we avoid the minute limitations and potential costs that are associated with GitHub runners, by leveraging the Ubuntu server that we have been provided with. The current runner is connected to the account of tyler-teufel at the time of the writing of this document, and is directly connected to this repository. For instructions on how this Self Hosted Runner was setup, see the following: Youtube Tutorial GitHub Gist Tutorial Post Following the following tutorials can provide some insight into how everything is setup.","title":"Self Hosted Runner Overview"},{"location":"Deployment-Procedure/#secrets","text":"In terms of the secrets that are traditionally utilized within a .env file for local development, we store them within the actions secrets within the repository. If you navigate to the repository settings and head to the 'secrets & variables' tab, and then select 'actions', you can add or modify any secrets needed. The secrets are then routed utilizing injection code within both the production.yml actions script, as well as the docker-compose.yaml file. These secrets are first accessed from the repository using secrets.SECRET_NAME under the env: section of the actions script. To ensure these variables can be used within all run steps, inject this within the deploy: section right after the line showing runs-on: self-hosted . Doing this allows for each subsequent job to have access the all of the variables within the environment itself. From here, think of the variables as being injected at runtime into the project environment. The next step is to inject these into the docker-compose.yaml file. Due to the way Docker is setup, it automatically tries to look for a .env file in the environment for the secrets. Since there is not one in this setup, we need to utilize an intuitive workaround that does not intervene with our docker-compose.override.yaml file we use for local development. This can be done by creating a section within the docker-compose.yaml file called x-common-env that would contain environmental variable injections that can be used as if it were in fact the contents of a .env file. By including this object within each container using the environment: <<: *common-env syntax in each containers configuration, we successfully allow for these secrets to now exist in the projects environment.","title":"Secrets"},{"location":"Deployment-Procedure/#deployment-triggers","text":"Our current deployment script is configured to act as soon as a PR is successfully merged into the main branch. Currently, for good practice, we have all PRs to main requiring at least one review before allowing them to be merged directly to the branch. We also have added branch protection preventing any deletion of the branch, as well as pushing commit directly to main. Any commits to main trigger the action to run, which consist of first granting necessary modification permissions to the directory of the project. Next, the docker containers are then confirmed to build. Following this, any existing containers are shut down, followed by the redeployment of the newly modified containers.","title":"Deployment Triggers"},{"location":"Develop-Actions/","text":"Develop Branch Actions As of the creation of this wiki page, the develop branch actions currently just verify that the docker containers build with every PR merged into develop, and checked again with every pr from develop to main .","title":"Develop Branch Actions"},{"location":"Develop-Actions/#develop-branch-actions","text":"As of the creation of this wiki page, the develop branch actions currently just verify that the docker containers build with every PR merged into develop, and checked again with every pr from develop to main .","title":"Develop Branch Actions"},{"location":"Front%E2%80%90End-README/","text":"The Eye - Auburn Baseball Data Visualization This project is built using Next.js and was initially bootstrapped with create-next-app . The Eye serves as a data visualization tool for Auburn Baseball, integrating various analytics to provide insights into player and team performance. Getting Started To start the development server, use one of the following commands: npm run dev # or yarn dev # or pnpm dev # or bun dev Once started, open http://localhost:3000 in your browser to access the application. Domain Live App : https://datagetta.app Domain Provider : Squarespace Domain Points To : datagetta.cse.eng.auburn.edu (for Auburn authentication) Auto-renew Date : February 5, 2025 Project Structure /app - Contains the core Next.js pages and layouts. layout.tsx - Provides global layout structure with Material UI theming and caching. page.tsx - Serves as the landing page with branding and login functionality. /the-eye/ - Houses primary UI components and authenticated user pages. layout.tsx - Defines the structure for authenticated pages, including the sidebar, mobile nav, and top bar. page.tsx - Displays conference tables and teams, querying data from Prisma. /components/ - Contains reusable UI components such as UI_Layout (sidebar, nav, etc.). /player/ - Handles player-related data visualization. /team/ - Manages team-level analytics and insights. /utils/ - Contains shared utilities such as theme configuration and database helpers. /prisma/ - Contains database schema and configuration files. /public/ - Holds static assets such as images. Key Technologies Next.js (App Router) - Framework for server-side rendering and static site generation. React - UI library for building components. Material UI - Ensures styling consistency across the UI. Prisma - ORM for database interactions. Configuration Files next.config.mjs - Default Next.js configuration (currently minimal but can be extended). tsconfig.json - TypeScript settings, including module resolution and path aliases. .eslintrc.json - ESLint configurations for code linting. Available Scripts In the project directory, you can run: npm run dev - Runs the development server. npm run build - Builds the project for production. npm run start - Starts the production server. npm run lint - Runs ESLint for code quality checks. The Eye Layout ( app/the-eye/layout.tsx ) Purpose : Provides structure for authenticated pages, including: A desktop sidebar A mobile navigation bar A top bar Main Components : UI_Layout : Handles sidebar and navigation elements. Toolbar : Adds spacing below the top bar. Box : Manages page layout with dynamic width adjustments. Conference Page ( app/the-eye/page.tsx ) Purpose : Displays conferences and teams, allowing users to browse baseball data. Database Query : Uses Prisma to fetch conference and team details. Main Components : Grid : Structures the page layout. Typography : Displays the \"Conferences\" heading. ConferenceTable : Renders tables for each conference and its teams. Query Behavior : Retrieves all conferences and their associated teams. Orders teams alphabetically by DisplayName . Authentication Authentication is handled using Auburn University's authentication service . Prisma - Database Management Prisma ORM is used for querying the database. For advanced queries, prisma.$queryRaw is used (necessary for database views and functions). Managing Prisma Schema DO NOT edit the schema.prisma file directly. Instead, modify schema.sql in the database directory. After updating the schema, generate a new Prisma client: bash npx prisma generate Handling PostgreSQL BigInt Issues Some Material UI components do not support BigInt values. Convert BigInt to Number using: js JSON.parse(JSON.stringify(data, replacer)); The replacer function is located in /app/utils/replacer.ts . Future Work Implement a Search Bar . Add the ability to hide Defensive Shift and Heat Map model tabs for non-pitchers. Deployment This application is deployed via Vercel . Changes pushed to the main branch will automatically trigger a deployment. Contributing Fork the repository. Create a new branch for your feature or fix. Commit your changes and push them. Open a pull request for review.","title":"The Eye - Auburn Baseball Data Visualization"},{"location":"Front%E2%80%90End-README/#the-eye-auburn-baseball-data-visualization","text":"This project is built using Next.js and was initially bootstrapped with create-next-app . The Eye serves as a data visualization tool for Auburn Baseball, integrating various analytics to provide insights into player and team performance.","title":"The Eye - Auburn Baseball Data Visualization"},{"location":"Front%E2%80%90End-README/#getting-started","text":"To start the development server, use one of the following commands: npm run dev # or yarn dev # or pnpm dev # or bun dev Once started, open http://localhost:3000 in your browser to access the application.","title":"Getting Started"},{"location":"Front%E2%80%90End-README/#domain","text":"Live App : https://datagetta.app Domain Provider : Squarespace Domain Points To : datagetta.cse.eng.auburn.edu (for Auburn authentication) Auto-renew Date : February 5, 2025","title":"Domain"},{"location":"Front%E2%80%90End-README/#project-structure","text":"/app - Contains the core Next.js pages and layouts. layout.tsx - Provides global layout structure with Material UI theming and caching. page.tsx - Serves as the landing page with branding and login functionality. /the-eye/ - Houses primary UI components and authenticated user pages. layout.tsx - Defines the structure for authenticated pages, including the sidebar, mobile nav, and top bar. page.tsx - Displays conference tables and teams, querying data from Prisma. /components/ - Contains reusable UI components such as UI_Layout (sidebar, nav, etc.). /player/ - Handles player-related data visualization. /team/ - Manages team-level analytics and insights. /utils/ - Contains shared utilities such as theme configuration and database helpers. /prisma/ - Contains database schema and configuration files. /public/ - Holds static assets such as images.","title":"Project Structure"},{"location":"Front%E2%80%90End-README/#key-technologies","text":"Next.js (App Router) - Framework for server-side rendering and static site generation. React - UI library for building components. Material UI - Ensures styling consistency across the UI. Prisma - ORM for database interactions.","title":"Key Technologies"},{"location":"Front%E2%80%90End-README/#configuration-files","text":"next.config.mjs - Default Next.js configuration (currently minimal but can be extended). tsconfig.json - TypeScript settings, including module resolution and path aliases. .eslintrc.json - ESLint configurations for code linting.","title":"Configuration Files"},{"location":"Front%E2%80%90End-README/#available-scripts","text":"In the project directory, you can run: npm run dev - Runs the development server. npm run build - Builds the project for production. npm run start - Starts the production server. npm run lint - Runs ESLint for code quality checks.","title":"Available Scripts"},{"location":"Front%E2%80%90End-README/#the-eye-layout-appthe-eyelayouttsx","text":"Purpose : Provides structure for authenticated pages, including: A desktop sidebar A mobile navigation bar A top bar Main Components : UI_Layout : Handles sidebar and navigation elements. Toolbar : Adds spacing below the top bar. Box : Manages page layout with dynamic width adjustments.","title":"The Eye Layout (app/the-eye/layout.tsx)"},{"location":"Front%E2%80%90End-README/#conference-page-appthe-eyepagetsx","text":"Purpose : Displays conferences and teams, allowing users to browse baseball data. Database Query : Uses Prisma to fetch conference and team details. Main Components : Grid : Structures the page layout. Typography : Displays the \"Conferences\" heading. ConferenceTable : Renders tables for each conference and its teams. Query Behavior : Retrieves all conferences and their associated teams. Orders teams alphabetically by DisplayName .","title":"Conference Page (app/the-eye/page.tsx)"},{"location":"Front%E2%80%90End-README/#authentication","text":"Authentication is handled using Auburn University's authentication service .","title":"Authentication"},{"location":"Front%E2%80%90End-README/#prisma-database-management","text":"Prisma ORM is used for querying the database. For advanced queries, prisma.$queryRaw is used (necessary for database views and functions).","title":"Prisma - Database Management"},{"location":"Front%E2%80%90End-README/#managing-prisma-schema","text":"DO NOT edit the schema.prisma file directly. Instead, modify schema.sql in the database directory. After updating the schema, generate a new Prisma client: bash npx prisma generate","title":"Managing Prisma Schema"},{"location":"Front%E2%80%90End-README/#handling-postgresql-bigint-issues","text":"Some Material UI components do not support BigInt values. Convert BigInt to Number using: js JSON.parse(JSON.stringify(data, replacer)); The replacer function is located in /app/utils/replacer.ts .","title":"Handling PostgreSQL BigInt Issues"},{"location":"Front%E2%80%90End-README/#future-work","text":"Implement a Search Bar . Add the ability to hide Defensive Shift and Heat Map model tabs for non-pitchers.","title":"Future Work"},{"location":"Front%E2%80%90End-README/#deployment","text":"This application is deployed via Vercel . Changes pushed to the main branch will automatically trigger a deployment.","title":"Deployment"},{"location":"Front%E2%80%90End-README/#contributing","text":"Fork the repository. Create a new branch for your feature or fix. Commit your changes and push them. Open a pull request for review.","title":"Contributing"},{"location":"Hitting-Stats-Visualization/","text":"Batting - Player Hitting Statistics Visualization This folder contains components used to display and visualize batting statistics for a player. Structure BattingStatsBarChart.tsx - Renders a bar chart of key batting statistics. BattingStatsTable.tsx - Displays detailed batting statistics in a table format. CreateBatterDiagrams.tsx - Combines both the table and bar chart into a single layout. Component Details BattingStatsBarChart.tsx Purpose : Creates a bar chart to display various batting statistics. Key Features : Uses the Material UI BarChart component. Formats data to match chart requirements. Displays the following statistics: OBP (On-Base Percentage) SLUG (Slugging Percentage) OPS (On-Base Plus Slugging) CHASE (Chase Percentage) IZW (In-Zone Whiff Percentage) ISO (Isolated Power) K% (Strikeout Percentage) BoB (Base on Balls Percentage) BattingStatsTable.tsx Purpose : Displays batting statistics in a structured table format. Key Features : Uses Material UI Table components for styling. Shows the following detailed batting statistics: Games played Plate appearances At-bats Batting average Hits, strikes, walks, strikeouts Homeruns, extra-base hits, sacrifice plays, hit-by-pitch Total bases CreateBatterDiagrams.tsx Purpose : Combines the bar chart and stats table into a structured layout. Key Features : Uses Material UI Grid for responsive design. Displays both the BattingStatsTable and BattingStatsBarChart components. Ensures data is consistently formatted and visualized effectively. Usage These components are used in player profiles to provide statistical insights into batting performance . Example usage: <CreateBatterDiagrams stats={playerBattingStats} /> This will render both the table and bar chart for the given player's batting statistics.","title":"Batting - Player Hitting Statistics Visualization"},{"location":"Hitting-Stats-Visualization/#batting-player-hitting-statistics-visualization","text":"This folder contains components used to display and visualize batting statistics for a player.","title":"Batting - Player Hitting Statistics Visualization"},{"location":"Hitting-Stats-Visualization/#structure","text":"BattingStatsBarChart.tsx - Renders a bar chart of key batting statistics. BattingStatsTable.tsx - Displays detailed batting statistics in a table format. CreateBatterDiagrams.tsx - Combines both the table and bar chart into a single layout.","title":"Structure"},{"location":"Hitting-Stats-Visualization/#component-details","text":"","title":"Component Details"},{"location":"Hitting-Stats-Visualization/#battingstatsbarcharttsx","text":"Purpose : Creates a bar chart to display various batting statistics. Key Features : Uses the Material UI BarChart component. Formats data to match chart requirements. Displays the following statistics: OBP (On-Base Percentage) SLUG (Slugging Percentage) OPS (On-Base Plus Slugging) CHASE (Chase Percentage) IZW (In-Zone Whiff Percentage) ISO (Isolated Power) K% (Strikeout Percentage) BoB (Base on Balls Percentage)","title":"BattingStatsBarChart.tsx"},{"location":"Hitting-Stats-Visualization/#battingstatstabletsx","text":"Purpose : Displays batting statistics in a structured table format. Key Features : Uses Material UI Table components for styling. Shows the following detailed batting statistics: Games played Plate appearances At-bats Batting average Hits, strikes, walks, strikeouts Homeruns, extra-base hits, sacrifice plays, hit-by-pitch Total bases","title":"BattingStatsTable.tsx"},{"location":"Hitting-Stats-Visualization/#createbatterdiagramstsx","text":"Purpose : Combines the bar chart and stats table into a structured layout. Key Features : Uses Material UI Grid for responsive design. Displays both the BattingStatsTable and BattingStatsBarChart components. Ensures data is consistently formatted and visualized effectively.","title":"CreateBatterDiagrams.tsx"},{"location":"Hitting-Stats-Visualization/#usage","text":"These components are used in player profiles to provide statistical insights into batting performance . Example usage: <CreateBatterDiagrams stats={playerBattingStats} /> This will render both the table and bar chart for the given player's batting statistics.","title":"Usage"},{"location":"Home/","text":"Welcome to the datagetta wiki This wiki will eventually contain a full library of documentation for all aspects of the project. See table of contents for setup help, and troubleshooting tips as well. Contributing to the Wiki As we continue to make changes, it is imperative that we are continuously creating thorough documentation. Given the continuous nature of this project, the more thorough we are at documenting the project, the easier the turnover and improvement becomes. At the time that we inherited this project, lack of thorough documentation was by far the biggest problem that wasted a lot of time in the early stages. See below for simple instructions on how to begin adding your documentation to the Wiki. Notes Before Getting Started The GitHub Wiki feature is a super intuitive way of organizing Markdown ( .md ) files in a user friendly manner. You can go about editing these pages either locally, by cloning the wiki scoped repository, or by editing directly in GitHub's web browser. For more info, you can checkout GitHub's Wiki docs here . If you are looking for some additional help, feel free to peep some of these resources: FreeCodeCamp GitHub Wiki Article Get Guru Article 1. Creating a New Page The first step in this process is super straight forward- you need to create a new page for your topic. This is genuinely as easy as clicking the New Page button at the top of the screen. If for whatever reason you have no idea what is meant by this, just click here . Once the new page is created, you will be redirected to a page to edit the markdown directly in the browser. This can be super helpful especially if you are new to markdown, as it shows you a preview in GitHub's flavor of markdown, and gives you tools for adding in styling. 2. Adding the Page to the Table of Contents Our table of contents lives in an organized manner in the sidebar you see on the wiki interface. This sidebar is simply just another markdown component, that we have organized simply using the header hierarchies. Once you have created and completed your document, you will want to add a link to your markdown file that now exists in the repository under whatever specific section your document falls to. If you feel that it does not fit a relevant category, but is too important to be considered miscellaneous, please feel free to add in a new header. For those of you who are still learning markdown, adding in links is super straightforward. Use the following code block as a reference: For links to other sites: [Link Text](https://link-to-website) And for links to other headers: [Link Text](hyphen-spaced-header-text) For a more comprehensive guide to markdown, click here , and for a cheat-sheet, click here . 3. Update as needed One of the most important aspects of documentation creation is ensuring they're constantly maintained and updated. It never hurts to have a second set of eyes laid on it, and your docs are only as helpful as they are up to date! At the time of this wiki's publishing, the following people are who you can reach out to with any questions regarding a specific part of the project: General Questions / Point of Contact: Tyler Teufel Back-End (Python Scripts, Automation): Josh Bingham Liam Maher Front-End: Gage Swann Database: Trey Edmondson","title":"Welcome to the datagetta wiki"},{"location":"Home/#welcome-to-the-datagetta-wiki","text":"This wiki will eventually contain a full library of documentation for all aspects of the project. See table of contents for setup help, and troubleshooting tips as well.","title":"Welcome to the datagetta wiki"},{"location":"Home/#contributing-to-the-wiki","text":"As we continue to make changes, it is imperative that we are continuously creating thorough documentation. Given the continuous nature of this project, the more thorough we are at documenting the project, the easier the turnover and improvement becomes. At the time that we inherited this project, lack of thorough documentation was by far the biggest problem that wasted a lot of time in the early stages. See below for simple instructions on how to begin adding your documentation to the Wiki.","title":"Contributing to the Wiki"},{"location":"Home/#notes-before-getting-started","text":"The GitHub Wiki feature is a super intuitive way of organizing Markdown ( .md ) files in a user friendly manner. You can go about editing these pages either locally, by cloning the wiki scoped repository, or by editing directly in GitHub's web browser. For more info, you can checkout GitHub's Wiki docs here . If you are looking for some additional help, feel free to peep some of these resources: FreeCodeCamp GitHub Wiki Article Get Guru Article","title":"Notes Before Getting Started"},{"location":"Home/#1-creating-a-new-page","text":"The first step in this process is super straight forward- you need to create a new page for your topic. This is genuinely as easy as clicking the New Page button at the top of the screen. If for whatever reason you have no idea what is meant by this, just click here . Once the new page is created, you will be redirected to a page to edit the markdown directly in the browser. This can be super helpful especially if you are new to markdown, as it shows you a preview in GitHub's flavor of markdown, and gives you tools for adding in styling.","title":"1. Creating a New Page"},{"location":"Home/#2-adding-the-page-to-the-table-of-contents","text":"Our table of contents lives in an organized manner in the sidebar you see on the wiki interface. This sidebar is simply just another markdown component, that we have organized simply using the header hierarchies. Once you have created and completed your document, you will want to add a link to your markdown file that now exists in the repository under whatever specific section your document falls to. If you feel that it does not fit a relevant category, but is too important to be considered miscellaneous, please feel free to add in a new header. For those of you who are still learning markdown, adding in links is super straightforward. Use the following code block as a reference: For links to other sites: [Link Text](https://link-to-website) And for links to other headers: [Link Text](hyphen-spaced-header-text) For a more comprehensive guide to markdown, click here , and for a cheat-sheet, click here .","title":"2. Adding the Page to the Table of Contents"},{"location":"Home/#3-update-as-needed","text":"One of the most important aspects of documentation creation is ensuring they're constantly maintained and updated. It never hurts to have a second set of eyes laid on it, and your docs are only as helpful as they are up to date!","title":"3. Update as needed"},{"location":"Home/#at-the-time-of-this-wikis-publishing-the-following-people-are-who-you-can-reach-out-to-with-any-questions-regarding-a-specific-part-of-the-project","text":"","title":"At the time of this wiki's publishing, the following people are who you can reach out to with any questions regarding a specific part of the project:"},{"location":"Home/#general-questions-point-of-contact","text":"Tyler Teufel","title":"General Questions / Point of Contact:"},{"location":"Home/#back-end-python-scripts-automation","text":"Josh Bingham Liam Maher","title":"Back-End (Python Scripts, Automation):"},{"location":"Home/#front-end","text":"Gage Swann","title":"Front-End:"},{"location":"Home/#database","text":"Trey Edmondson","title":"Database:"},{"location":"Linux-File-System-Overview/","text":"Main directories source: Ubuntu Community Wiki The standard Ubuntu directory structure mostly follows the Filesystem Hierarchy Standard , which can be referred to for more detailed information. Here, only the most important directories in the system will be presented. /bin is a place for most commonly used terminal commands, like ls, mount, rm, etc. /boot contains files needed to start up the system, including the Linux kernel , a RAM disk image and bootloader configuration files. /dev contains all device files, which are not regular files but instead refer to various hardware devices on the system, including hard drives. /etc contains system-global configuration files, which affect the system's behavior for all users. /home home sweet home, this is the place for users' home directories. /lib contains very important dynamic libraries and kernel modules /media is intended as a mount point for external devices, such as hard drives or removable media (floppies, CDs, DVDs). /mnt is also a place for mount points, but dedicated specifically to \"temporarily mounted\" devices, such as network filesystems. /opt can be used to store additional software for your system, which is not handled by the package manager . /proc is a virtual filesystem that provides a mechanism for kernel to send information to processes. /root is the superuser 's home directory, not in /home/ to allow for booting the system even if /home/ is not available. /run is a tmpfs (temporary file system) available early in the boot process where ephemeral run-time data is stored. Files under this directory are removed or truncated at the beginning of the boot process. (It deprecates various legacy locations such as /var/run, /var/lock, /lib/init/rw in otherwise non-ephemeral directory trees as well as /dev/.* and /dev/shm which are not device files.) /sbin contains important administrative commands that should generally only be employed by the superuser . /srv can contain data directories of services such as HTTP (/srv/www/) or FTP. /sys is a virtual filesystem that can be accessed to set or obtain information about the kernel's view of the system. /tmp is a place for temporary files used by applications. /usr contains the majority of user utilities and applications, and partly replicates the root directory structure, containing for instance, among others, /usr/bin/ and /usr/lib. /var is dedicated to variable data, such as logs, databases, websites, and temporary spool (e-mail etc.) files that persist from one boot to the next. A notable directory it contains is /var/log where system log files are kept.","title":"Main directories"},{"location":"Linux-File-System-Overview/#main-directories","text":"source: Ubuntu Community Wiki The standard Ubuntu directory structure mostly follows the Filesystem Hierarchy Standard , which can be referred to for more detailed information. Here, only the most important directories in the system will be presented. /bin is a place for most commonly used terminal commands, like ls, mount, rm, etc. /boot contains files needed to start up the system, including the Linux kernel , a RAM disk image and bootloader configuration files. /dev contains all device files, which are not regular files but instead refer to various hardware devices on the system, including hard drives. /etc contains system-global configuration files, which affect the system's behavior for all users. /home home sweet home, this is the place for users' home directories. /lib contains very important dynamic libraries and kernel modules /media is intended as a mount point for external devices, such as hard drives or removable media (floppies, CDs, DVDs). /mnt is also a place for mount points, but dedicated specifically to \"temporarily mounted\" devices, such as network filesystems. /opt can be used to store additional software for your system, which is not handled by the package manager . /proc is a virtual filesystem that provides a mechanism for kernel to send information to processes. /root is the superuser 's home directory, not in /home/ to allow for booting the system even if /home/ is not available. /run is a tmpfs (temporary file system) available early in the boot process where ephemeral run-time data is stored. Files under this directory are removed or truncated at the beginning of the boot process. (It deprecates various legacy locations such as /var/run, /var/lock, /lib/init/rw in otherwise non-ephemeral directory trees as well as /dev/.* and /dev/shm which are not device files.) /sbin contains important administrative commands that should generally only be employed by the superuser . /srv can contain data directories of services such as HTTP (/srv/www/) or FTP. /sys is a virtual filesystem that can be accessed to set or obtain information about the kernel's view of the system. /tmp is a place for temporary files used by applications. /usr contains the majority of user utilities and applications, and partly replicates the root directory structure, containing for instance, among others, /usr/bin/ and /usr/lib. /var is dedicated to variable data, such as logs, databases, websites, and temporary spool (e-mail etc.) files that persist from one boot to the next. A notable directory it contains is /var/log where system log files are kept.","title":"Main directories"},{"location":"Local-PostgreSQL-using-SQLAlchemy-and-Python-%28ChatGPT-POC%29/","text":"\ud83d\udcd6 Proof of Concept Tutorial: Using SQLAlchemy, Pandas, and PostgreSQL This step-by-step tutorial will guide you through setting up a local PostgreSQL database , using SQLAlchemy with Pandas , and inserting a CSV file into the database . \u2705 Who is this for? Beginners with minimal experience using PostgreSQL and SQLAlchemy. Anyone setting up a fresh environment for local development. \u2705 What will you learn? Install & configure PostgreSQL on your machine. Create a Python script to connect to the database. Set up SQLAlchemy & Pandas for working with PostgreSQL. Parse a simple CSV file and insert the data into the database. Verify the data inside PostgreSQL. 1\ufe0f\u20e3 Install PostgreSQL \ud83d\udd39 A. Install PostgreSQL Windows: Download and install PostgreSQL from https://www.postgresql.org/download/ . During installation, set the username to postgres and choose a password . Ensure pgAdmin is installed for managing the database. Mac (Homebrew Users): brew install postgresql brew services start postgresql Linux (Debian/Ubuntu Users): sudo apt update sudo apt install postgresql postgresql-contrib sudo systemctl start postgresql \ud83d\udd39 B. Verify PostgreSQL is Running Run the following command to check if PostgreSQL is active: pg_isready -h localhost -p 5432 -U postgres If PostgreSQL is not running , start it: sudo systemctl start postgresql # Linux brew services start postgresql # Mac 2\ufe0f\u20e3 Create a PostgreSQL Database \ud83d\udd39 A. Open the PostgreSQL Shell Run: psql -U postgres This opens the PostgreSQL interactive terminal. \ud83d\udd39 B. Create a New Database Inside psql , run: CREATE DATABASE mytestdb; \ud83d\udd39 C. Create a New User CREATE USER myuser WITH ENCRYPTED PASSWORD 'mypassword'; GRANT ALL PRIVILEGES ON DATABASE mytestdb TO myuser; \ud83d\udd39 D. Exit psql Type: \\q Your PostgreSQL database is now set up! \ud83c\udf89 3\ufe0f\u20e3 Set Up Python and Dependencies \ud83d\udd39 A. Create a New Project Folder mkdir sqlalchemy_demo && cd sqlalchemy_demo \ud83d\udd39 B. Create a Virtual Environment python3 -m venv venv source venv/bin/activate # macOS/Linux venv\\Scripts\\activate # Windows \ud83d\udd39 C. Install Dependencies pip install sqlalchemy psycopg2-binary pandas python-dotenv 4\ufe0f\u20e3 Configure Database Connection in Python \ud83d\udd39 A. Create a .env File Inside your sqlalchemy_demo folder, create a .env file : DB_NAME=mytestdb DB_USER=myuser DB_PASSWORD=mypassword DB_HOST=localhost DB_PORT=5432 \ud83d\udd39 B. Create a Python Script ( db_setup.py ) import os from dotenv import load_dotenv from sqlalchemy import create_engine # Load environment variables load_dotenv() # Retrieve database credentials DB_NAME = os.getenv(\"DB_NAME\") DB_USER = os.getenv(\"DB_USER\") DB_PASSWORD = os.getenv(\"DB_PASSWORD\") DB_HOST = os.getenv(\"DB_HOST\") DB_PORT = os.getenv(\"DB_PORT\") # Create the database connection DATABASE_URL = f\"postgresql://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}\" engine = create_engine(DATABASE_URL) # Test connection try: conn = engine.connect() print(\"\u2705 Successfully connected to PostgreSQL!\") conn.close() except Exception as e: print(f\"\u274c Database connection failed: {e}\") \ud83d\udd39 C. Run the Script python db_setup.py \u2705 If successful, you will see: \u2705 Successfully connected to PostgreSQL! 5\ufe0f\u20e3 Create a Table in PostgreSQL from db_setup import engine from sqlalchemy import Table, Column, Integer, String, MetaData # Define metadata metadata = MetaData() # Define table schema users_table = Table( \"users\", metadata, Column(\"id\", Integer, primary_key=True), Column(\"name\", String(50)), Column(\"email\", String(100)), ) # Create the table in PostgreSQL metadata.create_all(engine) print(\"\u2705 Table 'users' created successfully!\") \ud83d\udd39 Run the Script python create_table.py Check in psql : SELECT * FROM users; 6\ufe0f\u20e3 Insert a CSV File into PostgreSQL import pandas as pd from db_setup import engine # Load CSV df = pd.read_csv(\"users.csv\") # Insert data into PostgreSQL df.to_sql(\"users\", engine, if_exists=\"replace\", index=False) print(f\"\u2705 Successfully inserted {len(df)} rows into 'users' table.\") \ud83d\udd39 Run the Script python insert_csv.py \ud83d\udd39 Verify Data in PostgreSQL SELECT * FROM users; \ud83c\udfaf Conclusion \u2705 You have successfully: 1. Installed PostgreSQL and created a database . 2. Set up a Python project with SQLAlchemy and Pandas . 3. Connected to PostgreSQL using SQLAlchemy . 4. Created a table and inserted data from a CSV file . 5. Verified the data inside PostgreSQL . Would you like me to create a Docker version of this for easy deployment? \ud83d\ude80","title":"\ud83d\udcd6 Proof of Concept Tutorial: Using SQLAlchemy, Pandas, and PostgreSQL"},{"location":"Local-PostgreSQL-using-SQLAlchemy-and-Python-%28ChatGPT-POC%29/#proof-of-concept-tutorial-using-sqlalchemy-pandas-and-postgresql","text":"This step-by-step tutorial will guide you through setting up a local PostgreSQL database , using SQLAlchemy with Pandas , and inserting a CSV file into the database .","title":"\ud83d\udcd6 Proof of Concept Tutorial: Using SQLAlchemy, Pandas, and PostgreSQL"},{"location":"Local-PostgreSQL-using-SQLAlchemy-and-Python-%28ChatGPT-POC%29/#who-is-this-for","text":"Beginners with minimal experience using PostgreSQL and SQLAlchemy. Anyone setting up a fresh environment for local development.","title":"\u2705 Who is this for?"},{"location":"Local-PostgreSQL-using-SQLAlchemy-and-Python-%28ChatGPT-POC%29/#what-will-you-learn","text":"Install & configure PostgreSQL on your machine. Create a Python script to connect to the database. Set up SQLAlchemy & Pandas for working with PostgreSQL. Parse a simple CSV file and insert the data into the database. Verify the data inside PostgreSQL.","title":"\u2705 What will you learn?"},{"location":"Local-PostgreSQL-using-SQLAlchemy-and-Python-%28ChatGPT-POC%29/#1-install-postgresql","text":"","title":"1\ufe0f\u20e3 Install PostgreSQL"},{"location":"Local-PostgreSQL-using-SQLAlchemy-and-Python-%28ChatGPT-POC%29/#a-install-postgresql","text":"","title":"\ud83d\udd39 A. Install PostgreSQL"},{"location":"Local-PostgreSQL-using-SQLAlchemy-and-Python-%28ChatGPT-POC%29/#windows","text":"Download and install PostgreSQL from https://www.postgresql.org/download/ . During installation, set the username to postgres and choose a password . Ensure pgAdmin is installed for managing the database.","title":"Windows:"},{"location":"Local-PostgreSQL-using-SQLAlchemy-and-Python-%28ChatGPT-POC%29/#mac-homebrew-users","text":"brew install postgresql brew services start postgresql","title":"Mac (Homebrew Users):"},{"location":"Local-PostgreSQL-using-SQLAlchemy-and-Python-%28ChatGPT-POC%29/#linux-debianubuntu-users","text":"sudo apt update sudo apt install postgresql postgresql-contrib sudo systemctl start postgresql","title":"Linux (Debian/Ubuntu Users):"},{"location":"Local-PostgreSQL-using-SQLAlchemy-and-Python-%28ChatGPT-POC%29/#b-verify-postgresql-is-running","text":"Run the following command to check if PostgreSQL is active: pg_isready -h localhost -p 5432 -U postgres If PostgreSQL is not running , start it: sudo systemctl start postgresql # Linux brew services start postgresql # Mac","title":"\ud83d\udd39 B. Verify PostgreSQL is Running"},{"location":"Local-PostgreSQL-using-SQLAlchemy-and-Python-%28ChatGPT-POC%29/#2-create-a-postgresql-database","text":"","title":"2\ufe0f\u20e3 Create a PostgreSQL Database"},{"location":"Local-PostgreSQL-using-SQLAlchemy-and-Python-%28ChatGPT-POC%29/#a-open-the-postgresql-shell","text":"Run: psql -U postgres This opens the PostgreSQL interactive terminal.","title":"\ud83d\udd39 A. Open the PostgreSQL Shell"},{"location":"Local-PostgreSQL-using-SQLAlchemy-and-Python-%28ChatGPT-POC%29/#b-create-a-new-database","text":"Inside psql , run: CREATE DATABASE mytestdb;","title":"\ud83d\udd39 B. Create a New Database"},{"location":"Local-PostgreSQL-using-SQLAlchemy-and-Python-%28ChatGPT-POC%29/#c-create-a-new-user","text":"CREATE USER myuser WITH ENCRYPTED PASSWORD 'mypassword'; GRANT ALL PRIVILEGES ON DATABASE mytestdb TO myuser;","title":"\ud83d\udd39 C. Create a New User"},{"location":"Local-PostgreSQL-using-SQLAlchemy-and-Python-%28ChatGPT-POC%29/#d-exit-psql","text":"Type: \\q Your PostgreSQL database is now set up! \ud83c\udf89","title":"\ud83d\udd39 D. Exit psql"},{"location":"Local-PostgreSQL-using-SQLAlchemy-and-Python-%28ChatGPT-POC%29/#3-set-up-python-and-dependencies","text":"","title":"3\ufe0f\u20e3 Set Up Python and Dependencies"},{"location":"Local-PostgreSQL-using-SQLAlchemy-and-Python-%28ChatGPT-POC%29/#a-create-a-new-project-folder","text":"mkdir sqlalchemy_demo && cd sqlalchemy_demo","title":"\ud83d\udd39 A. Create a New Project Folder"},{"location":"Local-PostgreSQL-using-SQLAlchemy-and-Python-%28ChatGPT-POC%29/#b-create-a-virtual-environment","text":"python3 -m venv venv source venv/bin/activate # macOS/Linux venv\\Scripts\\activate # Windows","title":"\ud83d\udd39 B. Create a Virtual Environment"},{"location":"Local-PostgreSQL-using-SQLAlchemy-and-Python-%28ChatGPT-POC%29/#c-install-dependencies","text":"pip install sqlalchemy psycopg2-binary pandas python-dotenv","title":"\ud83d\udd39 C. Install Dependencies"},{"location":"Local-PostgreSQL-using-SQLAlchemy-and-Python-%28ChatGPT-POC%29/#4-configure-database-connection-in-python","text":"","title":"4\ufe0f\u20e3 Configure Database Connection in Python"},{"location":"Local-PostgreSQL-using-SQLAlchemy-and-Python-%28ChatGPT-POC%29/#a-create-a-env-file","text":"Inside your sqlalchemy_demo folder, create a .env file : DB_NAME=mytestdb DB_USER=myuser DB_PASSWORD=mypassword DB_HOST=localhost DB_PORT=5432","title":"\ud83d\udd39 A. Create a .env File"},{"location":"Local-PostgreSQL-using-SQLAlchemy-and-Python-%28ChatGPT-POC%29/#b-create-a-python-script-db_setuppy","text":"import os from dotenv import load_dotenv from sqlalchemy import create_engine # Load environment variables load_dotenv() # Retrieve database credentials DB_NAME = os.getenv(\"DB_NAME\") DB_USER = os.getenv(\"DB_USER\") DB_PASSWORD = os.getenv(\"DB_PASSWORD\") DB_HOST = os.getenv(\"DB_HOST\") DB_PORT = os.getenv(\"DB_PORT\") # Create the database connection DATABASE_URL = f\"postgresql://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}\" engine = create_engine(DATABASE_URL) # Test connection try: conn = engine.connect() print(\"\u2705 Successfully connected to PostgreSQL!\") conn.close() except Exception as e: print(f\"\u274c Database connection failed: {e}\")","title":"\ud83d\udd39 B. Create a Python Script (db_setup.py)"},{"location":"Local-PostgreSQL-using-SQLAlchemy-and-Python-%28ChatGPT-POC%29/#c-run-the-script","text":"python db_setup.py \u2705 If successful, you will see: \u2705 Successfully connected to PostgreSQL!","title":"\ud83d\udd39 C. Run the Script"},{"location":"Local-PostgreSQL-using-SQLAlchemy-and-Python-%28ChatGPT-POC%29/#5-create-a-table-in-postgresql","text":"from db_setup import engine from sqlalchemy import Table, Column, Integer, String, MetaData # Define metadata metadata = MetaData() # Define table schema users_table = Table( \"users\", metadata, Column(\"id\", Integer, primary_key=True), Column(\"name\", String(50)), Column(\"email\", String(100)), ) # Create the table in PostgreSQL metadata.create_all(engine) print(\"\u2705 Table 'users' created successfully!\")","title":"5\ufe0f\u20e3 Create a Table in PostgreSQL"},{"location":"Local-PostgreSQL-using-SQLAlchemy-and-Python-%28ChatGPT-POC%29/#run-the-script","text":"python create_table.py Check in psql : SELECT * FROM users;","title":"\ud83d\udd39 Run the Script"},{"location":"Local-PostgreSQL-using-SQLAlchemy-and-Python-%28ChatGPT-POC%29/#6-insert-a-csv-file-into-postgresql","text":"import pandas as pd from db_setup import engine # Load CSV df = pd.read_csv(\"users.csv\") # Insert data into PostgreSQL df.to_sql(\"users\", engine, if_exists=\"replace\", index=False) print(f\"\u2705 Successfully inserted {len(df)} rows into 'users' table.\")","title":"6\ufe0f\u20e3 Insert a CSV File into PostgreSQL"},{"location":"Local-PostgreSQL-using-SQLAlchemy-and-Python-%28ChatGPT-POC%29/#run-the-script_1","text":"python insert_csv.py","title":"\ud83d\udd39 Run the Script"},{"location":"Local-PostgreSQL-using-SQLAlchemy-and-Python-%28ChatGPT-POC%29/#verify-data-in-postgresql","text":"SELECT * FROM users;","title":"\ud83d\udd39 Verify Data in PostgreSQL"},{"location":"Local-PostgreSQL-using-SQLAlchemy-and-Python-%28ChatGPT-POC%29/#conclusion","text":"\u2705 You have successfully: 1. Installed PostgreSQL and created a database . 2. Set up a Python project with SQLAlchemy and Pandas . 3. Connected to PostgreSQL using SQLAlchemy . 4. Created a table and inserted data from a CSV file . 5. Verified the data inside PostgreSQL . Would you like me to create a Docker version of this for easy deployment? \ud83d\ude80","title":"\ud83c\udfaf Conclusion"},{"location":"OLD-Heat-Map-Visualization/","text":"HeatMap - Pitching Heat Map Visualization This folder contains components used to generate and display heat maps for a pitcher\u2019s pitch locations and effectiveness. Structure CreateHeatMaps.tsx - Queries data from the database and generates heat maps for different pitch types. HeatMap.tsx - Dynamically creates SVG-based heat maps by assigning colors to pitch zones. PitchTypeHeatMap.tsx - Displays heat maps for different pitch types and organizes them into a visual grid. Component Details CreateHeatMaps.tsx Purpose : Fetches pitch data from the database and renders heat maps for various pitch types. Key Features : Uses Prisma ORM to query pitch data. Supports multiple pitch types: Fastball, Slider, Changeup, etc. Passes formatted data to PitchTypeHeatMap.tsx for rendering. HeatMap.tsx Purpose : Renders a heat map SVG representing pitch density and effectiveness. Key Features : Uses color blending to visually differentiate pitch success and density. Defines strike-zone boundaries to overlay on the heat map. Dynamically positions each pitch in a 16x20 grid . Uses RGB color blending to adjust heat intensity. PitchTypeHeatMap.tsx Purpose : Displays heat maps for a specific pitch type (e.g., Fastball, Slider, etc.). Key Features : Accepts heatmap data from CreateHeatMaps.tsx . Renders three heat maps per pitch type: All Pitches Successful Pitches Pitch Ratio Organizes maps into a structured grid using Material UI Grid . Displays a title and separator for each pitch type. Usage These components work together to visualize pitching tendencies and provide insights into a pitcher\u2019s effectiveness. Example usage: <CreateHeatMaps player=\"John_Doe\" team=\"AUB_TIG\" /> This will generate heat maps for John Doe from Auburn Tigers and visualize how he pitches across different zones.","title":"HeatMap - Pitching Heat Map Visualization"},{"location":"OLD-Heat-Map-Visualization/#heatmap-pitching-heat-map-visualization","text":"This folder contains components used to generate and display heat maps for a pitcher\u2019s pitch locations and effectiveness.","title":"HeatMap - Pitching Heat Map Visualization"},{"location":"OLD-Heat-Map-Visualization/#structure","text":"CreateHeatMaps.tsx - Queries data from the database and generates heat maps for different pitch types. HeatMap.tsx - Dynamically creates SVG-based heat maps by assigning colors to pitch zones. PitchTypeHeatMap.tsx - Displays heat maps for different pitch types and organizes them into a visual grid.","title":"Structure"},{"location":"OLD-Heat-Map-Visualization/#component-details","text":"","title":"Component Details"},{"location":"OLD-Heat-Map-Visualization/#createheatmapstsx","text":"Purpose : Fetches pitch data from the database and renders heat maps for various pitch types. Key Features : Uses Prisma ORM to query pitch data. Supports multiple pitch types: Fastball, Slider, Changeup, etc. Passes formatted data to PitchTypeHeatMap.tsx for rendering.","title":"CreateHeatMaps.tsx"},{"location":"OLD-Heat-Map-Visualization/#heatmaptsx","text":"Purpose : Renders a heat map SVG representing pitch density and effectiveness. Key Features : Uses color blending to visually differentiate pitch success and density. Defines strike-zone boundaries to overlay on the heat map. Dynamically positions each pitch in a 16x20 grid . Uses RGB color blending to adjust heat intensity.","title":"HeatMap.tsx"},{"location":"OLD-Heat-Map-Visualization/#pitchtypeheatmaptsx","text":"Purpose : Displays heat maps for a specific pitch type (e.g., Fastball, Slider, etc.). Key Features : Accepts heatmap data from CreateHeatMaps.tsx . Renders three heat maps per pitch type: All Pitches Successful Pitches Pitch Ratio Organizes maps into a structured grid using Material UI Grid . Displays a title and separator for each pitch type.","title":"PitchTypeHeatMap.tsx"},{"location":"OLD-Heat-Map-Visualization/#usage","text":"These components work together to visualize pitching tendencies and provide insights into a pitcher\u2019s effectiveness. Example usage: <CreateHeatMaps player=\"John_Doe\" team=\"AUB_TIG\" /> This will generate heat maps for John Doe from Auburn Tigers and visualize how he pitches across different zones.","title":"Usage"},{"location":"OLD-Run-value-page/","text":"Run Value - Player and Team Performance Comparison This folder contains components that compare and visualize run values for batters and pitchers. The run value metric helps assess the effectiveness of certain pitch types against batters and teams. Structure Comparison Tables : BatterComparisonTable.tsx - Compares a pitcher's run values to a team\u2019s batters. PitcherComparisonTable.tsx - Compares a batter\u2019s run values to a team\u2019s pitchers. Gauge Visualizations : BatterScoreGauge.tsx - Displays a batter\u2019s run value scores per pitch type. PitcherScoreGauge.tsx - Displays a pitcher\u2019s run value scores per pitch type. Run Value Models : CreateRunValueModels.tsx - Queries data and generates run value comparisons between players and teams. Comparison Queries : CreateBatterComparisonTable.tsx - Fetches batters for team comparison. CreatePitcherComparisonTable.tsx - Fetches pitchers for team comparison. Team Selection : CreateTeamSelect.tsx - Retrieves and validates the team list. TeamSelect.tsx - Provides a dropdown for selecting a team. Component Details BatterComparisonTable.tsx Purpose : Compares a pitcher\u2019s run value scores against batters from a selected team. Key Features : Uses MUI DataGrid to display data in a sortable table. Highlights advantage: Green (Pitcher advantage) Red (Batter advantage) Columns include batter side, pitch type, and run value scores. PitcherComparisonTable.tsx Purpose : Compares a batter\u2019s run values against a team\u2019s pitchers. Key Features : Uses MUI DataGrid for visualization. Highlights advantage using color-coded scores. Displays pitcher handedness, pitch type, and calculated scores. BatterScoreGauge.tsx & PitcherScoreGauge.tsx Purpose : Displays run values in a gauge chart format for better visualization. Key Features : Uses MUI Gauge components. Dynamically assigns values to each pitch type. Adjusts display based on handedness and batting/pitching side. CreateRunValueModels.tsx Purpose : Queries batter and pitcher run values and renders the appropriate components. Key Features : Determines whether a player is a batter or pitcher. Fetches run value statistics from the database. Dynamically renders: PitcherScoreGauge for pitchers. BatterScoreGauge for batters. CreateBatterComparisonTable & CreatePitcherComparisonTable for analysis. CreateBatterComparisonTable.tsx & CreatePitcherComparisonTable.tsx Purpose : Fetches team-specific data for comparison tables. Key Features : Uses Prisma ORM to query batters/pitchers from a given team. Orders results by pitch type for consistency. Passes fetched data to BatterComparisonTable or PitcherComparisonTable . CreateTeamSelect.tsx & TeamSelect.tsx Purpose : Allows users to select a team for comparison. Key Features : Queries Southeastern Conference teams for filtering. Validates selected team to ensure it exists in the database. Uses MUI Autocomplete to provide a dropdown selector. Updates the URL dynamically upon team selection. Usage These components work together to analyze matchups between batters and pitchers based on run values . Example usage: <CreateRunValueModels team=\"AUB_TIG\" player=\"John_Doe\" opposingTeam=\"LSU_TIG\" /> This will: - Generate John Doe\u2019s run value model. - Compare his performance against batters/pitchers from LSU Tigers . - Display relevant charts and tables to analyze matchup effectiveness.","title":"Run Value - Player and Team Performance Comparison"},{"location":"OLD-Run-value-page/#run-value-player-and-team-performance-comparison","text":"This folder contains components that compare and visualize run values for batters and pitchers. The run value metric helps assess the effectiveness of certain pitch types against batters and teams.","title":"Run Value - Player and Team Performance Comparison"},{"location":"OLD-Run-value-page/#structure","text":"Comparison Tables : BatterComparisonTable.tsx - Compares a pitcher's run values to a team\u2019s batters. PitcherComparisonTable.tsx - Compares a batter\u2019s run values to a team\u2019s pitchers. Gauge Visualizations : BatterScoreGauge.tsx - Displays a batter\u2019s run value scores per pitch type. PitcherScoreGauge.tsx - Displays a pitcher\u2019s run value scores per pitch type. Run Value Models : CreateRunValueModels.tsx - Queries data and generates run value comparisons between players and teams. Comparison Queries : CreateBatterComparisonTable.tsx - Fetches batters for team comparison. CreatePitcherComparisonTable.tsx - Fetches pitchers for team comparison. Team Selection : CreateTeamSelect.tsx - Retrieves and validates the team list. TeamSelect.tsx - Provides a dropdown for selecting a team.","title":"Structure"},{"location":"OLD-Run-value-page/#component-details","text":"","title":"Component Details"},{"location":"OLD-Run-value-page/#battercomparisontabletsx","text":"Purpose : Compares a pitcher\u2019s run value scores against batters from a selected team. Key Features : Uses MUI DataGrid to display data in a sortable table. Highlights advantage: Green (Pitcher advantage) Red (Batter advantage) Columns include batter side, pitch type, and run value scores.","title":"BatterComparisonTable.tsx"},{"location":"OLD-Run-value-page/#pitchercomparisontabletsx","text":"Purpose : Compares a batter\u2019s run values against a team\u2019s pitchers. Key Features : Uses MUI DataGrid for visualization. Highlights advantage using color-coded scores. Displays pitcher handedness, pitch type, and calculated scores.","title":"PitcherComparisonTable.tsx"},{"location":"OLD-Run-value-page/#batterscoregaugetsx-pitcherscoregaugetsx","text":"Purpose : Displays run values in a gauge chart format for better visualization. Key Features : Uses MUI Gauge components. Dynamically assigns values to each pitch type. Adjusts display based on handedness and batting/pitching side.","title":"BatterScoreGauge.tsx &amp; PitcherScoreGauge.tsx"},{"location":"OLD-Run-value-page/#createrunvaluemodelstsx","text":"Purpose : Queries batter and pitcher run values and renders the appropriate components. Key Features : Determines whether a player is a batter or pitcher. Fetches run value statistics from the database. Dynamically renders: PitcherScoreGauge for pitchers. BatterScoreGauge for batters. CreateBatterComparisonTable & CreatePitcherComparisonTable for analysis.","title":"CreateRunValueModels.tsx"},{"location":"OLD-Run-value-page/#createbattercomparisontabletsx-createpitchercomparisontabletsx","text":"Purpose : Fetches team-specific data for comparison tables. Key Features : Uses Prisma ORM to query batters/pitchers from a given team. Orders results by pitch type for consistency. Passes fetched data to BatterComparisonTable or PitcherComparisonTable .","title":"CreateBatterComparisonTable.tsx &amp; CreatePitcherComparisonTable.tsx"},{"location":"OLD-Run-value-page/#createteamselecttsx-teamselecttsx","text":"Purpose : Allows users to select a team for comparison. Key Features : Queries Southeastern Conference teams for filtering. Validates selected team to ensure it exists in the database. Uses MUI Autocomplete to provide a dropdown selector. Updates the URL dynamically upon team selection.","title":"CreateTeamSelect.tsx &amp; TeamSelect.tsx"},{"location":"OLD-Run-value-page/#usage","text":"These components work together to analyze matchups between batters and pitchers based on run values . Example usage: <CreateRunValueModels team=\"AUB_TIG\" player=\"John_Doe\" opposingTeam=\"LSU_TIG\" /> This will: - Generate John Doe\u2019s run value model. - Compare his performance against batters/pitchers from LSU Tigers . - Display relevant charts and tables to analyze matchup effectiveness.","title":"Usage"},{"location":"OLD-Shift-Model/","text":"Defensive Shift Model - Player Positioning Analysis This folder contains components that visualize defensive shifts for various pitch types. These models help analyze how defensive positioning affects play outcomes based on pitch selection and batter handedness. Structure Shift Model Generation : CreateShiftingModels.tsx - Queries shift model data and generates visualizations. PitchTypeShiftModel.tsx - Generates defensive shift SVGs for different pitch types. ShiftingModel.tsx - Creates the actual SVG-based defensive shift heatmap. Component Details CreateShiftingModels.tsx Purpose : Fetches defensive shift model data for different pitch types and sends them to the visualization components. Key Features : Uses Prisma ORM to query shift data from the database. Retrieves model values for multiple pitch types (Fastball, Sinker, Changeup, Slider, Curveball, Cutter, Splitter). Converts queried data to JSON before passing it to PitchTypeShiftModel.tsx . PitchTypeShiftModel.tsx Purpose : Takes queried shift model data and renders SVG-based defensive shifts . Key Features : Displays left-side and right-side defensive shift visualizations. Generates a label for each pitch type. Uses MUI Grid layout to structure visuals. If no data exists for a pitch type, it returns an empty component. ShiftingModel.tsx Purpose : Creates color-coded heatmaps to represent defensive shifts. Key Features : Uses Auburn\u2019s branding colors : Navy Blue for outfield shift intensity. Orange for infield shift intensity. Dynamically adjusts shading based on shift percentages. Uses SVG polygon fills to render defensive positions. Displays percentage values inside each shift region. Usage These components generate defensive shift insights to analyze player positioning based on pitch selection. Example usage: <CreateShiftingModels player=\"John_Doe\" team=\"AUB_TIG\" /> This will: - Fetch John Doe\u2019s shift data. - Generate shift models for different pitch types. - Display color-coded defensive alignment to highlight strategic positioning. This tool is useful for coaches and analysts to determine how fielders should adjust based on pitcher tendencies and batter matchups.","title":"Defensive Shift Model - Player Positioning Analysis"},{"location":"OLD-Shift-Model/#defensive-shift-model-player-positioning-analysis","text":"This folder contains components that visualize defensive shifts for various pitch types. These models help analyze how defensive positioning affects play outcomes based on pitch selection and batter handedness.","title":"Defensive Shift Model - Player Positioning Analysis"},{"location":"OLD-Shift-Model/#structure","text":"Shift Model Generation : CreateShiftingModels.tsx - Queries shift model data and generates visualizations. PitchTypeShiftModel.tsx - Generates defensive shift SVGs for different pitch types. ShiftingModel.tsx - Creates the actual SVG-based defensive shift heatmap.","title":"Structure"},{"location":"OLD-Shift-Model/#component-details","text":"","title":"Component Details"},{"location":"OLD-Shift-Model/#createshiftingmodelstsx","text":"Purpose : Fetches defensive shift model data for different pitch types and sends them to the visualization components. Key Features : Uses Prisma ORM to query shift data from the database. Retrieves model values for multiple pitch types (Fastball, Sinker, Changeup, Slider, Curveball, Cutter, Splitter). Converts queried data to JSON before passing it to PitchTypeShiftModel.tsx .","title":"CreateShiftingModels.tsx"},{"location":"OLD-Shift-Model/#pitchtypeshiftmodeltsx","text":"Purpose : Takes queried shift model data and renders SVG-based defensive shifts . Key Features : Displays left-side and right-side defensive shift visualizations. Generates a label for each pitch type. Uses MUI Grid layout to structure visuals. If no data exists for a pitch type, it returns an empty component.","title":"PitchTypeShiftModel.tsx"},{"location":"OLD-Shift-Model/#shiftingmodeltsx","text":"Purpose : Creates color-coded heatmaps to represent defensive shifts. Key Features : Uses Auburn\u2019s branding colors : Navy Blue for outfield shift intensity. Orange for infield shift intensity. Dynamically adjusts shading based on shift percentages. Uses SVG polygon fills to render defensive positions. Displays percentage values inside each shift region.","title":"ShiftingModel.tsx"},{"location":"OLD-Shift-Model/#usage","text":"These components generate defensive shift insights to analyze player positioning based on pitch selection. Example usage: <CreateShiftingModels player=\"John_Doe\" team=\"AUB_TIG\" /> This will: - Fetch John Doe\u2019s shift data. - Generate shift models for different pitch types. - Display color-coded defensive alignment to highlight strategic positioning. This tool is useful for coaches and analysts to determine how fielders should adjust based on pitcher tendencies and batter matchups.","title":"Usage"},{"location":"Pitching-Stats-Visualization/","text":"Pitching - Pitching Statistics Visualization This folder contains components used to display and visualize pitching statistics for a player. Structure CreatePitcherDiagrams.tsx - Combines the stats table and bar chart for pitchers. PitchingStatsTable.tsx - Displays pitcher performance metrics in a table. PitchSumsBarChart.tsx - Renders a bar chart of pitch type distributions. Component Details CreatePitcherDiagrams.tsx Purpose : Combines PitchingStatsTable and PitchSumsBarChart into a structured layout. Key Features : Uses Material UI\u2019s Grid for responsive alignment. Displays pitching stats and pitch distribution data side by side. PitchingStatsTable.tsx Purpose : Displays detailed pitcher stats in a table format. Key Features : Uses Material UI\u2019s Table components for structured display. Shows key stats such as: Games played, starts, pitches thrown. Strikeouts, walks, batters faced. Advanced metrics like In-Zone Whiff Percentage, Chase Percentage, K%, BoB%. PitchSumsBarChart.tsx Purpose : Creates a bar chart representing different pitch types. Key Features : Uses Material UI BarChart for visualization. Displays counts of each pitch type (Fastball, Slider, Changeup, etc.). Adjusts bar color and scaling dynamically based on team themes. Usage These components work together to visualize pitching tendencies and provide insights into a pitcher\u2019s effectiveness. Example usage: <CreatePitcherDiagrams stats={playerPitchingStats} sums={playerPitchSums} /> This will render a pitching stats table and a bar chart of pitch distribution.","title":"Pitching - Pitching Statistics Visualization"},{"location":"Pitching-Stats-Visualization/#pitching-pitching-statistics-visualization","text":"This folder contains components used to display and visualize pitching statistics for a player.","title":"Pitching - Pitching Statistics Visualization"},{"location":"Pitching-Stats-Visualization/#structure","text":"CreatePitcherDiagrams.tsx - Combines the stats table and bar chart for pitchers. PitchingStatsTable.tsx - Displays pitcher performance metrics in a table. PitchSumsBarChart.tsx - Renders a bar chart of pitch type distributions.","title":"Structure"},{"location":"Pitching-Stats-Visualization/#component-details","text":"","title":"Component Details"},{"location":"Pitching-Stats-Visualization/#createpitcherdiagramstsx","text":"Purpose : Combines PitchingStatsTable and PitchSumsBarChart into a structured layout. Key Features : Uses Material UI\u2019s Grid for responsive alignment. Displays pitching stats and pitch distribution data side by side.","title":"CreatePitcherDiagrams.tsx"},{"location":"Pitching-Stats-Visualization/#pitchingstatstabletsx","text":"Purpose : Displays detailed pitcher stats in a table format. Key Features : Uses Material UI\u2019s Table components for structured display. Shows key stats such as: Games played, starts, pitches thrown. Strikeouts, walks, batters faced. Advanced metrics like In-Zone Whiff Percentage, Chase Percentage, K%, BoB%.","title":"PitchingStatsTable.tsx"},{"location":"Pitching-Stats-Visualization/#pitchsumsbarcharttsx","text":"Purpose : Creates a bar chart representing different pitch types. Key Features : Uses Material UI BarChart for visualization. Displays counts of each pitch type (Fastball, Slider, Changeup, etc.). Adjusts bar color and scaling dynamically based on team themes.","title":"PitchSumsBarChart.tsx"},{"location":"Pitching-Stats-Visualization/#usage","text":"These components work together to visualize pitching tendencies and provide insights into a pitcher\u2019s effectiveness. Example usage: <CreatePitcherDiagrams stats={playerPitchingStats} sums={playerPitchSums} /> This will render a pitching stats table and a bar chart of pitch distribution.","title":"Usage"},{"location":"Player-Components/","text":"Player Components This folder contains components used for player-related pages , including stat visualizations, model selectors, and general UI elements. Structure Stat Visualization : CreateStatsDiagrams.tsx - Determines if a player is a batter or pitcher and generates corresponding diagrams. User Interaction : DateSelector.tsx - Provides a date range picker for filtering stats. ModelTabs.tsx - Creates navigation tabs for switching between different player models. Player Information : PlayerInfo.tsx - Displays player name and team details. Loading Components : StatsTableSkeleton.tsx - Displays a loading skeleton while data loads. Component Details CreateStatsDiagrams.tsx Purpose : Determines whether a player is a batter or pitcher and loads the appropriate stat diagrams. Key Features : Uses Prisma ORM to query batter, pitcher, and pitch count statistics. Calls CreateBatterDiagrams.tsx for hitters and CreatePitcherDiagrams.tsx for pitchers. Returns a \"Strikeout!\" message if no data is found. DateSelector.tsx Purpose : Allows users to select a date range for filtering player stats. Key Features : Uses MUI DatePicker components. Updates the URL dynamically based on selected dates. Prevents incorrect date selections with error handling. ModelTabs.tsx Purpose : Displays navigation tabs for switching between different player models. Key Features : Highlights the active tab based on the current URL. Provides links to: Stats Defensive Shift Heat Maps Run Values PlayerInfo.tsx Purpose : Displays player name and team details . Key Features : Formats the player name for proper display. Uses MUI Typography for consistent styling. StatsTableSkeleton.tsx Purpose : Displays a loading skeleton while player stats are being retrieved. Key Features : Uses MUI Skeleton component. Prevents layout shifts by maintaining element size. Summary This folder contains essential player-focused UI components that enhance the experience by enabling dynamic data updates, user interactions, and navigation between different player models. These components work together to ensure a seamless data visualization experience for coaches, analysts, and users exploring Auburn Baseball data. Example Usage: <CreateStatsDiagrams player=\"John_Doe\" team=\"AUB_TIG\" startDate=\"2024-02-01\" endDate=\"2024-04-01\" />","title":"Player Components"},{"location":"Player-Components/#player-components","text":"This folder contains components used for player-related pages , including stat visualizations, model selectors, and general UI elements.","title":"Player Components"},{"location":"Player-Components/#structure","text":"Stat Visualization : CreateStatsDiagrams.tsx - Determines if a player is a batter or pitcher and generates corresponding diagrams. User Interaction : DateSelector.tsx - Provides a date range picker for filtering stats. ModelTabs.tsx - Creates navigation tabs for switching between different player models. Player Information : PlayerInfo.tsx - Displays player name and team details. Loading Components : StatsTableSkeleton.tsx - Displays a loading skeleton while data loads.","title":"Structure"},{"location":"Player-Components/#component-details","text":"","title":"Component Details"},{"location":"Player-Components/#createstatsdiagramstsx","text":"Purpose : Determines whether a player is a batter or pitcher and loads the appropriate stat diagrams. Key Features : Uses Prisma ORM to query batter, pitcher, and pitch count statistics. Calls CreateBatterDiagrams.tsx for hitters and CreatePitcherDiagrams.tsx for pitchers. Returns a \"Strikeout!\" message if no data is found.","title":"CreateStatsDiagrams.tsx"},{"location":"Player-Components/#dateselectortsx","text":"Purpose : Allows users to select a date range for filtering player stats. Key Features : Uses MUI DatePicker components. Updates the URL dynamically based on selected dates. Prevents incorrect date selections with error handling.","title":"DateSelector.tsx"},{"location":"Player-Components/#modeltabstsx","text":"Purpose : Displays navigation tabs for switching between different player models. Key Features : Highlights the active tab based on the current URL. Provides links to: Stats Defensive Shift Heat Maps Run Values","title":"ModelTabs.tsx"},{"location":"Player-Components/#playerinfotsx","text":"Purpose : Displays player name and team details . Key Features : Formats the player name for proper display. Uses MUI Typography for consistent styling.","title":"PlayerInfo.tsx"},{"location":"Player-Components/#statstableskeletontsx","text":"Purpose : Displays a loading skeleton while player stats are being retrieved. Key Features : Uses MUI Skeleton component. Prevents layout shifts by maintaining element size.","title":"StatsTableSkeleton.tsx"},{"location":"Player-Components/#summary","text":"This folder contains essential player-focused UI components that enhance the experience by enabling dynamic data updates, user interactions, and navigation between different player models. These components work together to ensure a seamless data visualization experience for coaches, analysts, and users exploring Auburn Baseball data. Example Usage: <CreateStatsDiagrams player=\"John_Doe\" team=\"AUB_TIG\" startDate=\"2024-02-01\" endDate=\"2024-04-01\" />","title":"Summary"},{"location":"Player-Directory/","text":"Player Directory This directory contains all player-related data and components for displaying individual player statistics, heat maps, run value models, and defensive shifts. Structure [teamName]/ - Dynamic folder that holds all players for a specific team . components/ - Contains shared UI components used in player pages. Player Pages Each player has a dedicated page within their team folder , structured as follows: stats/ - Displays player statistics over a given date range. heatMap/ - Shows heat maps for pitchers. runValue/ - Displays run value models for players. shiftModel/ - Displays defensive shifting models. Components The components/ folder contains shared components for displaying: Batting and pitching stats Heat maps for pitches Defensive shift models Run value models These components allow for dynamic data visualization and enable interactive exploration of player performance. Example Player Page Structure /player/ [teamName]/ [playerName]/ stats/ heatMap/ runValue/ shiftModel/ components/ This directory ensures organized player data management and efficient data retrieval for Auburn Baseball analytics.","title":"Player Directory"},{"location":"Player-Directory/#player-directory","text":"This directory contains all player-related data and components for displaying individual player statistics, heat maps, run value models, and defensive shifts.","title":"Player Directory"},{"location":"Player-Directory/#structure","text":"[teamName]/ - Dynamic folder that holds all players for a specific team . components/ - Contains shared UI components used in player pages.","title":"Structure"},{"location":"Player-Directory/#player-pages","text":"Each player has a dedicated page within their team folder , structured as follows: stats/ - Displays player statistics over a given date range. heatMap/ - Shows heat maps for pitchers. runValue/ - Displays run value models for players. shiftModel/ - Displays defensive shifting models.","title":"Player Pages"},{"location":"Player-Directory/#components","text":"The components/ folder contains shared components for displaying: Batting and pitching stats Heat maps for pitches Defensive shift models Run value models These components allow for dynamic data visualization and enable interactive exploration of player performance.","title":"Components"},{"location":"Player-Directory/#example-player-page-structure","text":"/player/ [teamName]/ [playerName]/ stats/ heatMap/ runValue/ shiftModel/ components/ This directory ensures organized player data management and efficient data retrieval for Auburn Baseball analytics.","title":"Example Player Page Structure"},{"location":"Player-Page/","text":"Player Page Layout This folder contains all the player-specific models and data visualizations for a given player within a team. Structure heatMap/ - Displays a player's heat maps based on pitch data. runValue/ - Shows the player's run value model against different opponents. shiftModel/ - Provides defensive shift models based on pitch tendencies. stats/ - Displays statistical breakdowns for a player over a selected date range. layout.tsx - Defines the layout for all player-related pages. layout.tsx Overview This file serves as the layout for all player pages , ensuring a consistent structure across different visualizations and stat models. It fetches player details from the database , displays player information, and renders navigation tabs for switching between different models. Key Functionalities Extracts teamName and playerName from the URL parameters. Queries the database using Prisma to retrieve: The player's full name. The team\u2019s display name. Displays a navigation bar ( ModelTabs ) for switching between different data visualizations. Renders PlayerInfo to show player details at the top of the page. Wraps all child components ( children ) to allow each model's respective page to be displayed within the layout. Key Components Used ModelTabs - Navigation tabs for switching between different player models. PlayerInfo - Displays the player's name and team information. Box - Provides structured spacing and padding. How It Works Fetches the player's name and team using Prisma. Displays a top navigation bar ( ModelTabs ) for selecting different data visualizations. Shows player details ( PlayerInfo ) at the top of the page. Renders child components ( {children} ), allowing specific player models (heat maps, stats, etc.) to load dynamically. Example Usage This layout automatically wraps all player-related pages when accessed through: /the-eye/player/{teamName}/{playerName}/ For example: /the-eye/player/AUB_TIG/John_Doe/ This would display John Doe\u2019s player page, where users can navigate between different models such as heat maps, stats, and shift models using the ModelTabs navigation.","title":"Player Page Layout"},{"location":"Player-Page/#player-page-layout","text":"This folder contains all the player-specific models and data visualizations for a given player within a team.","title":"Player Page Layout"},{"location":"Player-Page/#structure","text":"heatMap/ - Displays a player's heat maps based on pitch data. runValue/ - Shows the player's run value model against different opponents. shiftModel/ - Provides defensive shift models based on pitch tendencies. stats/ - Displays statistical breakdowns for a player over a selected date range. layout.tsx - Defines the layout for all player-related pages.","title":"Structure"},{"location":"Player-Page/#layouttsx-overview","text":"This file serves as the layout for all player pages , ensuring a consistent structure across different visualizations and stat models. It fetches player details from the database , displays player information, and renders navigation tabs for switching between different models.","title":"layout.tsx Overview"},{"location":"Player-Page/#key-functionalities","text":"Extracts teamName and playerName from the URL parameters. Queries the database using Prisma to retrieve: The player's full name. The team\u2019s display name. Displays a navigation bar ( ModelTabs ) for switching between different data visualizations. Renders PlayerInfo to show player details at the top of the page. Wraps all child components ( children ) to allow each model's respective page to be displayed within the layout.","title":"Key Functionalities"},{"location":"Player-Page/#key-components-used","text":"ModelTabs - Navigation tabs for switching between different player models. PlayerInfo - Displays the player's name and team information. Box - Provides structured spacing and padding.","title":"Key Components Used"},{"location":"Player-Page/#how-it-works","text":"Fetches the player's name and team using Prisma. Displays a top navigation bar ( ModelTabs ) for selecting different data visualizations. Shows player details ( PlayerInfo ) at the top of the page. Renders child components ( {children} ), allowing specific player models (heat maps, stats, etc.) to load dynamically.","title":"How It Works"},{"location":"Player-Page/#example-usage","text":"This layout automatically wraps all player-related pages when accessed through: /the-eye/player/{teamName}/{playerName}/ For example: /the-eye/player/AUB_TIG/John_Doe/ This would display John Doe\u2019s player page, where users can navigate between different models such as heat maps, stats, and shift models using the ModelTabs navigation.","title":"Example Usage"},{"location":"Player-Percentiles-Documentation/","text":"\ud83d\udcca Player Percentiles Page \u2013 Documentation Author: Liam Maher Last Modified: 05/11/2025 \ud83d\udd0d Overview The Percentiles Page displays statistical performance percentiles for individual pitchers based on pitch type and season year (currently 2024 and 2025). It dynamically pulls data from PostgreSQL views and presents the results visually using Material UI progress bars. This page is designed to support interactive filtering via a dropdown menu and dynamically swaps between pitcher_percentiles_by_pitchtype_2024 and pitcher_percentiles_by_pitchtype_2025 . \u2699\ufe0f Core Components \u2705 CreatePlayerPercent.tsx Server component that: Accepts playerName , pitchType , and year as props. Dynamically selects the correct SQL view: ts const viewName = `pitcher_percentiles_by_pitchtype_${year}`; Fetches data with parameterized queries using Prisma. Validates year to prevent injection or invalid data access. Renders a styled progress bar chart for each stat. \u2705 FilterDropdowns.tsx Client-side dropdown component for: Pitch type ( Fastball , Slider , etc.) Year ( 2024 , 2025 ) Syncs selection to URL query parameters using useRouter() and useSearchParams() . \u2705 page.tsx Reads search parameters and passes them as props. Displays both the dropdowns and the stat bar chart. \u2705 layout.tsx Applies page padding and MUI theming layout across the player profile view. \ud83d\udcc6 Season-Specific Views (2024 and 2025) Currently, PostgreSQL views such as pitcher_percentiles_by_pitchtype_2024 and pitcher_percentiles_by_pitchtype_2025 are created manually each season. Each view: - Filters all data to just that season (using seasons table join on SeasonTitle ) - Computes: - FIP - K % - BB % - Chase % - Velocity % - Induced Vertical Break - Horizontal Break - Groups by both pitcher and pitch type - Applies PERCENT_RANK() to calculate percentile for each metric \ud83d\udd2e Future Suggestion: Automate View Generation To reduce maintenance effort: - Consider creating a parameterized materialized view or - Build a season-agnostic view that includes a year column and filters in the app layer","title":"Player Percentiles Documentation"},{"location":"Player-Percentiles-Documentation/#player-percentiles-page-documentation","text":"Author: Liam Maher Last Modified: 05/11/2025","title":"\ud83d\udcca Player Percentiles Page \u2013 Documentation"},{"location":"Player-Percentiles-Documentation/#overview","text":"The Percentiles Page displays statistical performance percentiles for individual pitchers based on pitch type and season year (currently 2024 and 2025). It dynamically pulls data from PostgreSQL views and presents the results visually using Material UI progress bars. This page is designed to support interactive filtering via a dropdown menu and dynamically swaps between pitcher_percentiles_by_pitchtype_2024 and pitcher_percentiles_by_pitchtype_2025 .","title":"\ud83d\udd0d Overview"},{"location":"Player-Percentiles-Documentation/#core-components","text":"","title":"\u2699\ufe0f Core Components"},{"location":"Player-Percentiles-Documentation/#createplayerpercenttsx","text":"Server component that: Accepts playerName , pitchType , and year as props. Dynamically selects the correct SQL view: ts const viewName = `pitcher_percentiles_by_pitchtype_${year}`; Fetches data with parameterized queries using Prisma. Validates year to prevent injection or invalid data access. Renders a styled progress bar chart for each stat.","title":"\u2705 CreatePlayerPercent.tsx"},{"location":"Player-Percentiles-Documentation/#filterdropdownstsx","text":"Client-side dropdown component for: Pitch type ( Fastball , Slider , etc.) Year ( 2024 , 2025 ) Syncs selection to URL query parameters using useRouter() and useSearchParams() .","title":"\u2705 FilterDropdowns.tsx"},{"location":"Player-Percentiles-Documentation/#pagetsx","text":"Reads search parameters and passes them as props. Displays both the dropdowns and the stat bar chart.","title":"\u2705 page.tsx"},{"location":"Player-Percentiles-Documentation/#layouttsx","text":"Applies page padding and MUI theming layout across the player profile view.","title":"\u2705 layout.tsx"},{"location":"Player-Percentiles-Documentation/#season-specific-views-2024-and-2025","text":"Currently, PostgreSQL views such as pitcher_percentiles_by_pitchtype_2024 and pitcher_percentiles_by_pitchtype_2025 are created manually each season. Each view: - Filters all data to just that season (using seasons table join on SeasonTitle ) - Computes: - FIP - K % - BB % - Chase % - Velocity % - Induced Vertical Break - Horizontal Break - Groups by both pitcher and pitch type - Applies PERCENT_RANK() to calculate percentile for each metric","title":"\ud83d\udcc6 Season-Specific Views (2024 and 2025)"},{"location":"Player-Percentiles-Documentation/#future-suggestion-automate-view-generation","text":"To reduce maintenance effort: - Consider creating a parameterized materialized view or - Build a season-agnostic view that includes a year column and filters in the app layer","title":"\ud83d\udd2e Future Suggestion: Automate View Generation"},{"location":"Player-Stats-Redirect/","text":"Player Stats - Redirect Page This folder contains a redirect mechanism to ensure a player's stats page is accessed with the required startDate and endDate parameters. Files page.tsx - Redirects users to a dynamically generated stats page with a default date range. page.tsx Overview This file exists to redirect users to a player's stats page with an appropriate time range when the startDate and endDate parameters are missing. Since these dates are required to query the database, this redirect ensures the proper routing without user input. Key Functionalities: Decodes teamName and playerName from the URL parameters. Defines a startOfSeason date (February 16, 2024). Fetches the current date using dayjs() . Constructs a URL with a valid date range and redirects the user permanently. How It Works Extracts team name and player name from the URL parameters. Defines a fixed start-of-season date ( 2024-02-16 ). Retrieves the current date dynamically. Constructs a permanent redirect URL in the format: /the-eye/player/{teamName}/{playerName}/stats/{startDate}/{endDate} Uses permanentRedirect() from next/navigation to automatically reroute users to the correct stats page. Example Usage This page is accessed dynamically through the app's routing system: /the-eye/player/{teamName}/{playerName}/stats For example: /the-eye/player/AUB_TIG/John_Doe/stats This would automatically redirect the user to: /the-eye/player/AUB_TIG/John_Doe/stats/2024-02-16/2024-04-25 Where 2024-02-16 is the start of the season , and 2024-04-25 is the current date . This ensures proper functionality when accessing player stats without requiring the user to manually enter date parameters.","title":"Player Stats - Redirect Page"},{"location":"Player-Stats-Redirect/#player-stats-redirect-page","text":"This folder contains a redirect mechanism to ensure a player's stats page is accessed with the required startDate and endDate parameters.","title":"Player Stats - Redirect Page"},{"location":"Player-Stats-Redirect/#files","text":"page.tsx - Redirects users to a dynamically generated stats page with a default date range.","title":"Files"},{"location":"Player-Stats-Redirect/#pagetsx-overview","text":"This file exists to redirect users to a player's stats page with an appropriate time range when the startDate and endDate parameters are missing. Since these dates are required to query the database, this redirect ensures the proper routing without user input.","title":"page.tsx Overview"},{"location":"Player-Stats-Redirect/#key-functionalities","text":"Decodes teamName and playerName from the URL parameters. Defines a startOfSeason date (February 16, 2024). Fetches the current date using dayjs() . Constructs a URL with a valid date range and redirects the user permanently.","title":"Key Functionalities:"},{"location":"Player-Stats-Redirect/#how-it-works","text":"Extracts team name and player name from the URL parameters. Defines a fixed start-of-season date ( 2024-02-16 ). Retrieves the current date dynamically. Constructs a permanent redirect URL in the format: /the-eye/player/{teamName}/{playerName}/stats/{startDate}/{endDate} Uses permanentRedirect() from next/navigation to automatically reroute users to the correct stats page.","title":"How It Works"},{"location":"Player-Stats-Redirect/#example-usage","text":"This page is accessed dynamically through the app's routing system: /the-eye/player/{teamName}/{playerName}/stats For example: /the-eye/player/AUB_TIG/John_Doe/stats This would automatically redirect the user to: /the-eye/player/AUB_TIG/John_Doe/stats/2024-02-16/2024-04-25 Where 2024-02-16 is the start of the season , and 2024-04-25 is the current date . This ensures proper functionality when accessing player stats without requiring the user to manually enter date parameters.","title":"Example Usage"},{"location":"Player-Stats-%E2%80%90-Time%E2%80%90Filtered-Data-Analysis/","text":"Player Stats - Time-Filtered Data Analysis This folder contains the player stats visualization for a specific pitcher within a given date range. Files page.tsx - Displays player statistics between a selected startDate and endDate . page.tsx Overview This file dynamically renders player statistics for a given time period. It decodes the team name , player name , start date , and end date from the URL parameters and passes them to the CreateStatsDiagrams component. Key Components: Box : Wrapper for the page layout. DateSelector : Allows users to filter stats based on a start and end date. Suspense : Ensures smooth loading by displaying StatsTableSkeleton while stats load. CreateStatsDiagrams : Generates visual representations of the player's performance over the selected time range. How It Works Extracts team name , player name , start date , and end date from the URL parameters. Displays a DateSelector to allow users to adjust the timeframe. Uses Suspense to show a loading skeleton while CreateStatsDiagrams processes the data. Calls CreateStatsDiagrams to visualize the player's performance over the selected period. Example Usage This page is accessed dynamically through the app's routing system: /the-eye/player/{teamName}/{playerName}/stats/{startDate}/{endDate} For example: /the-eye/player/AUB_TIG/John_Doe/stats/2024-04-01/2024-04-15 This would generate a statistical breakdown of John Doe , a pitcher from AUB_TIG , between April 1, 2024 , and April 15, 2024 .","title":"Player Stats - Time-Filtered Data Analysis"},{"location":"Player-Stats-%E2%80%90-Time%E2%80%90Filtered-Data-Analysis/#player-stats-time-filtered-data-analysis","text":"This folder contains the player stats visualization for a specific pitcher within a given date range.","title":"Player Stats - Time-Filtered Data Analysis"},{"location":"Player-Stats-%E2%80%90-Time%E2%80%90Filtered-Data-Analysis/#files","text":"page.tsx - Displays player statistics between a selected startDate and endDate .","title":"Files"},{"location":"Player-Stats-%E2%80%90-Time%E2%80%90Filtered-Data-Analysis/#pagetsx-overview","text":"This file dynamically renders player statistics for a given time period. It decodes the team name , player name , start date , and end date from the URL parameters and passes them to the CreateStatsDiagrams component.","title":"page.tsx Overview"},{"location":"Player-Stats-%E2%80%90-Time%E2%80%90Filtered-Data-Analysis/#key-components","text":"Box : Wrapper for the page layout. DateSelector : Allows users to filter stats based on a start and end date. Suspense : Ensures smooth loading by displaying StatsTableSkeleton while stats load. CreateStatsDiagrams : Generates visual representations of the player's performance over the selected time range.","title":"Key Components:"},{"location":"Player-Stats-%E2%80%90-Time%E2%80%90Filtered-Data-Analysis/#how-it-works","text":"Extracts team name , player name , start date , and end date from the URL parameters. Displays a DateSelector to allow users to adjust the timeframe. Uses Suspense to show a loading skeleton while CreateStatsDiagrams processes the data. Calls CreateStatsDiagrams to visualize the player's performance over the selected period.","title":"How It Works"},{"location":"Player-Stats-%E2%80%90-Time%E2%80%90Filtered-Data-Analysis/#example-usage","text":"This page is accessed dynamically through the app's routing system: /the-eye/player/{teamName}/{playerName}/stats/{startDate}/{endDate} For example: /the-eye/player/AUB_TIG/John_Doe/stats/2024-04-01/2024-04-15 This would generate a statistical breakdown of John Doe , a pitcher from AUB_TIG , between April 1, 2024 , and April 15, 2024 .","title":"Example Usage"},{"location":"Run-Value-Page/","text":"Run Value - Player and Team Performance Comparison This folder contains components that compare and visualize run values for batters and pitchers. The run value metric helps assess the effectiveness of certain pitch types against batters and teams. Structure Comparison Tables : BatterComparisonTable.tsx - Compares a pitcher's run values to a team\u2019s batters. PitcherComparisonTable.tsx - Compares a batter\u2019s run values to a team\u2019s pitchers. Gauge Visualizations : BatterScoreGauge.tsx - Displays a batter\u2019s run value scores per pitch type. PitcherScoreGauge.tsx - Displays a pitcher\u2019s run value scores per pitch type. Run Value Models : CreateRunValueModels.tsx - Queries data and generates run value comparisons between players and teams. Comparison Queries : CreateBatterComparisonTable.tsx - Fetches batters for team comparison. CreatePitcherComparisonTable.tsx - Fetches pitchers for team comparison. Team Selection : CreateTeamSelect.tsx - Retrieves and validates the team list. TeamSelect.tsx - Provides a dropdown for selecting a team. Component Details BatterComparisonTable.tsx Purpose : Compares a pitcher\u2019s run value scores against batters from a selected team. Key Features : Uses MUI DataGrid to display data in a sortable table. Highlights advantage: Green (Pitcher advantage) Red (Batter advantage) Columns include batter side, pitch type, and run value scores. PitcherComparisonTable.tsx Purpose : Compares a batter\u2019s run values against a team\u2019s pitchers. Key Features : Uses MUI DataGrid for visualization. Highlights advantage using color-coded scores. Displays pitcher handedness, pitch type, and calculated scores. BatterScoreGauge.tsx & PitcherScoreGauge.tsx Purpose : Displays run values in a gauge chart format for better visualization. Key Features : Uses MUI Gauge components. Dynamically assigns values to each pitch type. Adjusts display based on handedness and batting/pitching side. CreateRunValueModels.tsx Purpose : Queries batter and pitcher run values and renders the appropriate components. Key Features : Determines whether a player is a batter or pitcher. Fetches run value statistics from the database. Dynamically renders: PitcherScoreGauge for pitchers. BatterScoreGauge for batters. CreateBatterComparisonTable & CreatePitcherComparisonTable for analysis. CreateBatterComparisonTable.tsx & CreatePitcherComparisonTable.tsx Purpose : Fetches team-specific data for comparison tables. Key Features : Uses Prisma ORM to query batters/pitchers from a given team. Orders results by pitch type for consistency. Passes fetched data to BatterComparisonTable or PitcherComparisonTable . CreateTeamSelect.tsx & TeamSelect.tsx Purpose : Allows users to select a team for comparison. Key Features : Queries Southeastern Conference teams for filtering. Validates selected team to ensure it exists in the database. Uses MUI Autocomplete to provide a dropdown selector. Updates the URL dynamically upon team selection. Usage These components work together to analyze matchups between batters and pitchers based on run values . Example usage: <CreateRunValueModels team=\"AUB_TIG\" player=\"John_Doe\" opposingTeam=\"LSU_TIG\" /> This will: - Generate John Doe\u2019s run value model. - Compare his performance against batters/pitchers from LSU Tigers . - Display relevant charts and tables to analyze matchup effectiveness.","title":"Run Value - Player and Team Performance Comparison"},{"location":"Run-Value-Page/#run-value-player-and-team-performance-comparison","text":"This folder contains components that compare and visualize run values for batters and pitchers. The run value metric helps assess the effectiveness of certain pitch types against batters and teams.","title":"Run Value - Player and Team Performance Comparison"},{"location":"Run-Value-Page/#structure","text":"Comparison Tables : BatterComparisonTable.tsx - Compares a pitcher's run values to a team\u2019s batters. PitcherComparisonTable.tsx - Compares a batter\u2019s run values to a team\u2019s pitchers. Gauge Visualizations : BatterScoreGauge.tsx - Displays a batter\u2019s run value scores per pitch type. PitcherScoreGauge.tsx - Displays a pitcher\u2019s run value scores per pitch type. Run Value Models : CreateRunValueModels.tsx - Queries data and generates run value comparisons between players and teams. Comparison Queries : CreateBatterComparisonTable.tsx - Fetches batters for team comparison. CreatePitcherComparisonTable.tsx - Fetches pitchers for team comparison. Team Selection : CreateTeamSelect.tsx - Retrieves and validates the team list. TeamSelect.tsx - Provides a dropdown for selecting a team.","title":"Structure"},{"location":"Run-Value-Page/#component-details","text":"","title":"Component Details"},{"location":"Run-Value-Page/#battercomparisontabletsx","text":"Purpose : Compares a pitcher\u2019s run value scores against batters from a selected team. Key Features : Uses MUI DataGrid to display data in a sortable table. Highlights advantage: Green (Pitcher advantage) Red (Batter advantage) Columns include batter side, pitch type, and run value scores.","title":"BatterComparisonTable.tsx"},{"location":"Run-Value-Page/#pitchercomparisontabletsx","text":"Purpose : Compares a batter\u2019s run values against a team\u2019s pitchers. Key Features : Uses MUI DataGrid for visualization. Highlights advantage using color-coded scores. Displays pitcher handedness, pitch type, and calculated scores.","title":"PitcherComparisonTable.tsx"},{"location":"Run-Value-Page/#batterscoregaugetsx-pitcherscoregaugetsx","text":"Purpose : Displays run values in a gauge chart format for better visualization. Key Features : Uses MUI Gauge components. Dynamically assigns values to each pitch type. Adjusts display based on handedness and batting/pitching side.","title":"BatterScoreGauge.tsx &amp; PitcherScoreGauge.tsx"},{"location":"Run-Value-Page/#createrunvaluemodelstsx","text":"Purpose : Queries batter and pitcher run values and renders the appropriate components. Key Features : Determines whether a player is a batter or pitcher. Fetches run value statistics from the database. Dynamically renders: PitcherScoreGauge for pitchers. BatterScoreGauge for batters. CreateBatterComparisonTable & CreatePitcherComparisonTable for analysis.","title":"CreateRunValueModels.tsx"},{"location":"Run-Value-Page/#createbattercomparisontabletsx-createpitchercomparisontabletsx","text":"Purpose : Fetches team-specific data for comparison tables. Key Features : Uses Prisma ORM to query batters/pitchers from a given team. Orders results by pitch type for consistency. Passes fetched data to BatterComparisonTable or PitcherComparisonTable .","title":"CreateBatterComparisonTable.tsx &amp; CreatePitcherComparisonTable.tsx"},{"location":"Run-Value-Page/#createteamselecttsx-teamselecttsx","text":"Purpose : Allows users to select a team for comparison. Key Features : Queries Southeastern Conference teams for filtering. Validates selected team to ensure it exists in the database. Uses MUI Autocomplete to provide a dropdown selector. Updates the URL dynamically upon team selection.","title":"CreateTeamSelect.tsx &amp; TeamSelect.tsx"},{"location":"Run-Value-Page/#usage","text":"These components work together to analyze matchups between batters and pitchers based on run values . Example usage: <CreateRunValueModels team=\"AUB_TIG\" player=\"John_Doe\" opposingTeam=\"LSU_TIG\" /> This will: - Generate John Doe\u2019s run value model. - Compare his performance against batters/pitchers from LSU Tigers . - Display relevant charts and tables to analyze matchup effectiveness.","title":"Usage"},{"location":"Structure-of-Project/","text":"Full directory Breakdown For the full dump download, click here . . \u251c\u2500\u2500 Caddyfile \u251c\u2500\u2500 README.md \u251c\u2500\u2500 backups \u251c\u2500\u2500 csvparser \u2502 \u251c\u2500\u2500 csv \u2502 \u2502 \u251c\u2500\u2500 20220913-PlainsmanPark-Private-1_unverified.csv \u2502 \u2502 \u2514\u2500\u2500 20250216-Surprise-2_unverified.csv \u2502 \u251c\u2500\u2500 include \u2502 \u2502 \u251c\u2500\u2500 backup.json \u2502 \u2502 \u251c\u2500\u2500 database_schema_AUDB.txt \u2502 \u2502 \u251c\u2500\u2500 db_files.txt \u2502 \u2502 \u251c\u2500\u2500 schema.json \u2502 \u2502 \u2514\u2500\u2500 test.txt \u2502 \u251c\u2500\u2500 known_errors.txt \u2502 \u251c\u2500\u2500 requirements.txt \u2502 \u251c\u2500\u2500 src \u2502 \u2502 \u251c\u2500\u2500 __pycache__ \u2502 \u2502 \u2502 \u251c\u2500\u2500 config.cpython-312.pyc \u2502 \u2502 \u2502 \u251c\u2500\u2500 config.cpython-313.pyc \u2502 \u2502 \u2502 \u251c\u2500\u2500 csvParser.cpython-310.pyc \u2502 \u2502 \u2502 \u251c\u2500\u2500 csvParser.cpython-312.pyc \u2502 \u2502 \u2502 \u251c\u2500\u2500 csvParser.cpython-313.pyc \u2502 \u2502 \u2502 \u251c\u2500\u2500 csvParser.cpython-36.pyc \u2502 \u2502 \u2502 \u2514\u2500\u2500 csvParser.cpython-38.pyc \u2502 \u2502 \u251c\u2500\u2500 config.py \u2502 \u2502 \u251c\u2500\u2500 csv-logs \u2502 \u2502 \u2502 \u251c\u2500\u2500 csv_log_2024-03-19.txt \u2502 \u2502 \u2502 \u251c\u2500\u2500 csv_log_2024-03-20.txt \u2502 \u2502 \u2502 \u251c\u2500\u2500 csv_log_2024-03-24.txt \u2502 \u2502 \u2502 \u251c\u2500\u2500 csv_log_2024-04-14.txt \u2502 \u2502 \u2502 \u251c\u2500\u2500 csv_log_2024-04-15.txt \u2502 \u2502 \u2502 \u251c\u2500\u2500 csv_log_2025-02-05.txt \u2502 \u2502 \u2502 \u251c\u2500\u2500 csv_log_2025-02-11.txt \u2502 \u2502 \u2502 \u251c\u2500\u2500 csv_log_2025-02-12.txt \u2502 \u2502 \u2502 \u251c\u2500\u2500 csv_log_2025-02-13.txt \u2502 \u2502 \u2502 \u251c\u2500\u2500 csv_log_2025-02-14.txt \u2502 \u2502 \u2502 \u251c\u2500\u2500 csv_log_2025-02-19.txt \u2502 \u2502 \u2502 \u251c\u2500\u2500 csv_log_2025-02-20.txt \u2502 \u2502 \u2502 \u251c\u2500\u2500 csv_log_2025-02-24.txt \u2502 \u2502 \u2502 \u251c\u2500\u2500 csv_log_2025-02-25.txt \u2502 \u2502 \u2502 \u251c\u2500\u2500 csv_log_2025-02-26.txt \u2502 \u2502 \u2502 \u251c\u2500\u2500 csv_log_2025-03-03.txt \u2502 \u2502 \u2502 \u2514\u2500\u2500 csv_log_2025-03-30.txt \u2502 \u2502 \u251c\u2500\u2500 csvParser.py \u2502 \u2502 \u251c\u2500\u2500 fixLog.py \u2502 \u2502 \u251c\u2500\u2500 ftpPuller.py \u2502 \u2502 \u251c\u2500\u2500 rand.py \u2502 \u2502 \u251c\u2500\u2500 requirements.txt \u2502 \u2502 \u251c\u2500\u2500 startingLineup.py \u2502 \u2502 \u2514\u2500\u2500 txtJsonParse.py \u2502 \u2514\u2500\u2500 tests \u2502 \u251c\u2500\u2500 findData.py \u2502 \u2514\u2500\u2500 sqlConenctTest.py \u251c\u2500\u2500 data/ \u251c\u2500\u2500 database \u2502 \u251c\u2500\u2500 DOCS-SQL.md \u2502 \u2514\u2500\u2500 sql \u2502 \u251c\u2500\u2500 1_pre-schema.sql \u2502 \u251c\u2500\u2500 2_schema.sql \u2502 \u251c\u2500\u2500 3_seasons.sql \u2502 \u251c\u2500\u2500 4_add-conferences.sql \u2502 \u251c\u2500\u2500 5_team-assignment.sql \u2502 \u251c\u2500\u2500 6_views.sql \u2502 \u251c\u2500\u2500 7_keepd1.sql \u2502 \u2514\u2500\u2500 8_functions.sql \u251c\u2500\u2500 db.env \u251c\u2500\u2500 dg-frontend \u2502 \u251c\u2500\u2500 README.md \u2502 \u251c\u2500\u2500 next-env.d.ts \u2502 \u251c\u2500\u2500 next.config.ts \u2502 \u251c\u2500\u2500 Node_Modules/ \u2502 \u251c\u2500\u2500 package-lock.json \u2502 \u251c\u2500\u2500 package.json \u2502 \u251c\u2500\u2500 prisma \u2502 \u2502 \u251c\u2500\u2500 schema.prisma \u2502 \u2502 \u2514\u2500\u2500 views \u2502 \u2502 \u2514\u2500\u2500 public \u2502 \u2502 \u251c\u2500\u2500 batter_stats_view_2024.sql \u2502 \u2502 \u251c\u2500\u2500 pitch_sums_view_2024.sql \u2502 \u2502 \u251c\u2500\u2500 pitcher_pitch_type_avg_view.sql \u2502 \u2502 \u2514\u2500\u2500 pitcher_stats_view_2024.sql \u2502 \u251c\u2500\u2500 public \u2502 \u2502 \u251c\u2500\u2500 AI_Model_Visuals.ai \u2502 \u2502 \u251c\u2500\u2500 AuburnLogo.svg \u2502 \u2502 \u251c\u2500\u2500 Corner-Flag.svg \u2502 \u2502 \u251c\u2500\u2500 PlainsmanPark.jpeg \u2502 \u2502 \u251c\u2500\u2500 ScriptAuburn.jpg \u2502 \u2502 \u251c\u2500\u2500 TheEye.ai \u2502 \u2502 \u251c\u2500\u2500 TheEyeLogo.svg \u2502 \u2502 \u251c\u2500\u2500 au_logo_onecolor_white.svg \u2502 \u2502 \u251c\u2500\u2500 boys.jpg \u2502 \u2502 \u251c\u2500\u2500 favicon.ico \u2502 \u2502 \u251c\u2500\u2500 lineAnimation.gif \u2502 \u2502 \u2514\u2500\u2500 nav_stripes.png \u2502 \u251c\u2500\u2500 src \u2502 \u2502 \u251c\u2500\u2500 app \u2502 \u2502 \u2502 \u251c\u2500\u2500 auth \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 login \u2502 \u2502 \u2502 \u251c\u2500\u2500 conferences \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 README.md \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 layout.tsx \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 page.tsx \u2502 \u2502 \u2502 \u251c\u2500\u2500 layout.tsx \u2502 \u2502 \u2502 \u251c\u2500\u2500 page.tsx \u2502 \u2502 \u2502 \u251c\u2500\u2500 team \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 [teamName] \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 components \u2502 \u2502 \u2502 \u2514\u2500\u2500 utils \u2502 \u2502 \u2502 \u251c\u2500\u2500 Link.tsx \u2502 \u2502 \u2502 \u251c\u2500\u2500 db.ts \u2502 \u2502 \u2502 \u251c\u2500\u2500 replacer.ts \u2502 \u2502 \u2502 \u251c\u2500\u2500 theme.ts \u2502 \u2502 \u2502 \u2514\u2500\u2500 types.ts \u2502 \u2502 \u2514\u2500\u2500 components \u2502 \u2502 \u251c\u2500\u2500 ConferenceTable.tsx \u2502 \u2502 \u251c\u2500\u2500 DesktopSideBar.tsx \u2502 \u2502 \u251c\u2500\u2500 MobileSideBar.tsx \u2502 \u2502 \u251c\u2500\u2500 TabGroup.tsx \u2502 \u2502 \u251c\u2500\u2500 Tabs.tsx \u2502 \u2502 \u251c\u2500\u2500 TopBar.tsx \u2502 \u2502 \u2514\u2500\u2500 UI_Layout.tsx \u2502 \u2514\u2500\u2500 tsconfig.json \u251c\u2500\u2500 docker-compose.override.yaml \u251c\u2500\u2500 docker-compose.yaml \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 DOCS-SETUP.md \u2502 \u2514\u2500\u2500 diagrams.md \u251c\u2500\u2500 empty.env \u251c\u2500\u2500 ise \u2502 \u251c\u2500\u2500 batter_scores.csv \u2502 \u251c\u2500\u2500 batter_scores.py \u2502 \u251c\u2500\u2500 notes.txt \u2502 \u251c\u2500\u2500 pitch_scores.csv \u2502 \u2514\u2500\u2500 pitcher_scores.py \u251c\u2500\u2500 scripts \u2502 \u251c\u2500\u2500 cron-script.sh \u2502 \u2514\u2500\u2500 weekly.cron \u251c\u2500\u2500 structure.txt \u2514\u2500\u2500 ui \u2514\u2500\u2500 the-eye \u2514\u2500\u2500 next-env.d.ts 1561 directories, 29135 files","title":"Structure of Project"},{"location":"Team-Batter-Page/","text":"Team Batter Page This folder contains the team batter statistics page , which displays batting stats for all players on a given team. File Overview page.tsx Purpose : Generates the team batter stats page dynamically based on the provided team name. Key Features : Fetches and Displays Batting Stats : Uses CreateBatterTable.tsx to generate the batting table. Suspense and Loading State : Wraps the batter stats table in React.Suspense , using TableSkeleton.tsx as a fallback to enhance performance and user experience. Dynamic Routing : Extracts teamName from the URL and decodes it for use in queries. Component Breakdown CreateBatterTable.tsx : Queries and formats batting stats before rendering them in a table. TableSkeleton.tsx : Displays a loading skeleton while data is being fetched. Example Usage The page is automatically routed based on the team name in the URL: /the-eye/team/AUB_TIG/batter This will display all batter stats for Auburn Tigers. Summary This page provides team-wide batting statistics in a structured and easy-to-read table, leveraging server-side rendering for fast and efficient data retrieval.","title":"Team Batter Page"},{"location":"Team-Batter-Page/#team-batter-page","text":"This folder contains the team batter statistics page , which displays batting stats for all players on a given team.","title":"Team Batter Page"},{"location":"Team-Batter-Page/#file-overview","text":"","title":"File Overview"},{"location":"Team-Batter-Page/#pagetsx","text":"Purpose : Generates the team batter stats page dynamically based on the provided team name. Key Features : Fetches and Displays Batting Stats : Uses CreateBatterTable.tsx to generate the batting table. Suspense and Loading State : Wraps the batter stats table in React.Suspense , using TableSkeleton.tsx as a fallback to enhance performance and user experience. Dynamic Routing : Extracts teamName from the URL and decodes it for use in queries.","title":"page.tsx"},{"location":"Team-Batter-Page/#component-breakdown","text":"CreateBatterTable.tsx : Queries and formats batting stats before rendering them in a table. TableSkeleton.tsx : Displays a loading skeleton while data is being fetched.","title":"Component Breakdown"},{"location":"Team-Batter-Page/#example-usage","text":"The page is automatically routed based on the team name in the URL: /the-eye/team/AUB_TIG/batter This will display all batter stats for Auburn Tigers.","title":"Example Usage"},{"location":"Team-Batter-Page/#summary","text":"This page provides team-wide batting statistics in a structured and easy-to-read table, leveraging server-side rendering for fast and efficient data retrieval.","title":"Summary"},{"location":"Team-Components/","text":"Team Components This folder contains components used for team-related pages , including player stats tables, roster displays, and navigation elements. Structure Tables : BatterTable.tsx - Displays batting statistics for players. PitcherTable.tsx - Displays pitching statistics for players. PitchSumsTable.tsx - Displays pitch type usage for pitchers. RosterTable.tsx - Displays team roster information. Data Fetching : CreateBatterTable.tsx - Queries batting stats and passes them to BatterTable.tsx . CreatePitcherTable.tsx - Queries pitching stats and pitch type usage, passing results to PitcherTable.tsx and PitchSumsTable.tsx . CreateRosterTable.tsx - Queries team roster information and passes it to RosterTable.tsx . Navigation & UI : TableTabs.tsx - Provides navigation between roster, batting, and pitching pages. TeamInfo.tsx - Displays team name and conference. Loading Components : TableSkeleton.tsx - Displays a loading skeleton while table data is being retrieved. Component Details BatterTable.tsx Purpose : Displays batting statistics for a team's players. Key Features : Uses MUI DataGrid to display tabular data. Player names link to their individual stat pages. Includes various batting metrics such as AVG, OPS, HR, BB% . PitcherTable.tsx Purpose : Displays pitching statistics for a team's players. Key Features : Uses MUI DataGrid to display tabular data. Player names link to their individual stat pages. Displays key metrics like ERA, IP, K%, BB% . PitchSumsTable.tsx Purpose : Displays pitch type usage for a team's pitchers. Key Features : Shows the number of pitches thrown for each pitch type. Links pitcher names to their individual stat pages. RosterTable.tsx Purpose : Displays a team\u2019s roster . Key Features : Uses MUI DataGrid to display roster information. Player names link to their individual stat pages. CreateBatterTable.tsx Purpose : Queries the batter statistics database and sends data to BatterTable.tsx . Key Features : Uses Prisma ORM to retrieve data from batter_stats_view_2024 . CreatePitcherTable.tsx Purpose : Queries pitching statistics and pitch type usage . Key Features : Uses Prisma ORM to retrieve data from pitcher_stats_view_2024 and pitch_sums_view_2024 . Passes results to PitcherTable.tsx and PitchSumsTable.tsx . CreateRosterTable.tsx Purpose : Queries and displays a team\u2019s roster . Key Features : Uses Prisma ORM to fetch all players on a team. Orders players alphabetically before passing to RosterTable.tsx . TableTabs.tsx Purpose : Provides navigation tabs to switch between Roster, Batting, and Pitching . Key Features : Highlights the active tab based on the current URL. Allows seamless navigation between different team data pages. TeamInfo.tsx Purpose : Displays team name and conference . Key Features : Uses MUI Typography for consistent styling. TableSkeleton.tsx Purpose : Displays a loading skeleton while table data is being retrieved. Key Features : Uses MUI Skeleton component. Prevents layout shifts by maintaining element size. Summary This folder contains essential team-focused UI components that enhance the experience by enabling dynamic data updates, user interactions, and navigation between different team models. These components work together to ensure a seamless data visualization experience for coaches, analysts, and users exploring Auburn Baseball data. Example Usage: <CreateBatterTable team=\"AUB_TIG\" />","title":"Team Components"},{"location":"Team-Components/#team-components","text":"This folder contains components used for team-related pages , including player stats tables, roster displays, and navigation elements.","title":"Team Components"},{"location":"Team-Components/#structure","text":"Tables : BatterTable.tsx - Displays batting statistics for players. PitcherTable.tsx - Displays pitching statistics for players. PitchSumsTable.tsx - Displays pitch type usage for pitchers. RosterTable.tsx - Displays team roster information. Data Fetching : CreateBatterTable.tsx - Queries batting stats and passes them to BatterTable.tsx . CreatePitcherTable.tsx - Queries pitching stats and pitch type usage, passing results to PitcherTable.tsx and PitchSumsTable.tsx . CreateRosterTable.tsx - Queries team roster information and passes it to RosterTable.tsx . Navigation & UI : TableTabs.tsx - Provides navigation between roster, batting, and pitching pages. TeamInfo.tsx - Displays team name and conference. Loading Components : TableSkeleton.tsx - Displays a loading skeleton while table data is being retrieved.","title":"Structure"},{"location":"Team-Components/#component-details","text":"","title":"Component Details"},{"location":"Team-Components/#battertabletsx","text":"Purpose : Displays batting statistics for a team's players. Key Features : Uses MUI DataGrid to display tabular data. Player names link to their individual stat pages. Includes various batting metrics such as AVG, OPS, HR, BB% .","title":"BatterTable.tsx"},{"location":"Team-Components/#pitchertabletsx","text":"Purpose : Displays pitching statistics for a team's players. Key Features : Uses MUI DataGrid to display tabular data. Player names link to their individual stat pages. Displays key metrics like ERA, IP, K%, BB% .","title":"PitcherTable.tsx"},{"location":"Team-Components/#pitchsumstabletsx","text":"Purpose : Displays pitch type usage for a team's pitchers. Key Features : Shows the number of pitches thrown for each pitch type. Links pitcher names to their individual stat pages.","title":"PitchSumsTable.tsx"},{"location":"Team-Components/#rostertabletsx","text":"Purpose : Displays a team\u2019s roster . Key Features : Uses MUI DataGrid to display roster information. Player names link to their individual stat pages.","title":"RosterTable.tsx"},{"location":"Team-Components/#createbattertabletsx","text":"Purpose : Queries the batter statistics database and sends data to BatterTable.tsx . Key Features : Uses Prisma ORM to retrieve data from batter_stats_view_2024 .","title":"CreateBatterTable.tsx"},{"location":"Team-Components/#createpitchertabletsx","text":"Purpose : Queries pitching statistics and pitch type usage . Key Features : Uses Prisma ORM to retrieve data from pitcher_stats_view_2024 and pitch_sums_view_2024 . Passes results to PitcherTable.tsx and PitchSumsTable.tsx .","title":"CreatePitcherTable.tsx"},{"location":"Team-Components/#createrostertabletsx","text":"Purpose : Queries and displays a team\u2019s roster . Key Features : Uses Prisma ORM to fetch all players on a team. Orders players alphabetically before passing to RosterTable.tsx .","title":"CreateRosterTable.tsx"},{"location":"Team-Components/#tabletabstsx","text":"Purpose : Provides navigation tabs to switch between Roster, Batting, and Pitching . Key Features : Highlights the active tab based on the current URL. Allows seamless navigation between different team data pages.","title":"TableTabs.tsx"},{"location":"Team-Components/#teaminfotsx","text":"Purpose : Displays team name and conference . Key Features : Uses MUI Typography for consistent styling.","title":"TeamInfo.tsx"},{"location":"Team-Components/#tableskeletontsx","text":"Purpose : Displays a loading skeleton while table data is being retrieved. Key Features : Uses MUI Skeleton component. Prevents layout shifts by maintaining element size.","title":"TableSkeleton.tsx"},{"location":"Team-Components/#summary","text":"This folder contains essential team-focused UI components that enhance the experience by enabling dynamic data updates, user interactions, and navigation between different team models. These components work together to ensure a seamless data visualization experience for coaches, analysts, and users exploring Auburn Baseball data. Example Usage: <CreateBatterTable team=\"AUB_TIG\" />","title":"Summary"},{"location":"Team-Directory/","text":"Team Directory This folder contains the structure for displaying team-specific data within The Eye application. Each team has pages for batting stats, pitching stats, and roster information . [teamName]/ - A dynamic folder containing pages for each individual team, including: batter/ - Displays team batting stats. pitcher/ - Displays team pitching stats. roster/ - Displays the team's full roster. layout.tsx - Defines the layout for team-specific pages. components/ - Contains reusable UI components for rendering team-related data, such as tables and navigation elements. Overview This directory is responsible for organizing all pages and components that handle team-specific data. It is dynamically structured to allow seamless navigation between teams and their respective statistics, providing an efficient and interactive experience for users analyzing Auburn Baseball data. File Details layout.tsx Purpose : Provides a consistent layout for team pages, displaying the team name, conference, and navigation tabs. Key Features : Retrieves team information (name and conference) from the database using Prisma. Uses MUI components to structure the layout and enhance UI design. Includes TableTabs.tsx for navigation between Roster, Batting, and Pitching pages . Displays TeamInfo.tsx to show team details . Renders dynamic children components for each specific team page (batting, pitching, or roster). Summary The [teamName]/ directory provides a structured and navigable interface for users to explore team-specific data. The layout.tsx ensures consistent styling and efficient data retrieval , improving the user experience when browsing different team pages.","title":"Team Directory"},{"location":"Team-Directory/#team-directory","text":"This folder contains the structure for displaying team-specific data within The Eye application. Each team has pages for batting stats, pitching stats, and roster information . [teamName]/ - A dynamic folder containing pages for each individual team, including: batter/ - Displays team batting stats. pitcher/ - Displays team pitching stats. roster/ - Displays the team's full roster. layout.tsx - Defines the layout for team-specific pages. components/ - Contains reusable UI components for rendering team-related data, such as tables and navigation elements.","title":"Team Directory"},{"location":"Team-Directory/#overview","text":"This directory is responsible for organizing all pages and components that handle team-specific data. It is dynamically structured to allow seamless navigation between teams and their respective statistics, providing an efficient and interactive experience for users analyzing Auburn Baseball data.","title":"Overview"},{"location":"Team-Directory/#file-details","text":"","title":"File Details"},{"location":"Team-Directory/#layouttsx","text":"Purpose : Provides a consistent layout for team pages, displaying the team name, conference, and navigation tabs. Key Features : Retrieves team information (name and conference) from the database using Prisma. Uses MUI components to structure the layout and enhance UI design. Includes TableTabs.tsx for navigation between Roster, Batting, and Pitching pages . Displays TeamInfo.tsx to show team details . Renders dynamic children components for each specific team page (batting, pitching, or roster).","title":"layout.tsx"},{"location":"Team-Directory/#summary","text":"The [teamName]/ directory provides a structured and navigable interface for users to explore team-specific data. The layout.tsx ensures consistent styling and efficient data retrieval , improving the user experience when browsing different team pages.","title":"Summary"},{"location":"Team-Pitcher-Page/","text":"Team Pitcher Page This folder contains the page.tsx file, which is responsible for displaying the pitching statistics of a specific team. It dynamically retrieves and presents data related to the team's pitchers. File Overview page.tsx Purpose : Renders a pitching stats table for the selected team. Key Functionalities : Retrieves the teamName from the URL parameters. Uses React Suspense to display a loading skeleton while fetching data. Calls CreatePitcherTable.tsx to query and render the data. How It Works The teamName parameter is extracted and decoded. A fallback skeleton ( TableSkeleton.tsx ) is displayed while data loads. CreatePitcherTable.tsx is called to fetch and display the team\u2019s pitcher statistics . Example Usage <Suspense fallback={<TableSkeleton />}> <CreatePitcherTable team={decodedTeamName} /> </Suspense> Dependencies CreatePitcherTable.tsx - Fetches and structures pitcher statistics . TableSkeleton.tsx - Displays a loading animation while data is being retrieved. This file ensures a seamless user experience by dynamically fetching and displaying pitcher-related data for any selected team.","title":"Team Pitcher Page"},{"location":"Team-Pitcher-Page/#team-pitcher-page","text":"This folder contains the page.tsx file, which is responsible for displaying the pitching statistics of a specific team. It dynamically retrieves and presents data related to the team's pitchers.","title":"Team Pitcher Page"},{"location":"Team-Pitcher-Page/#file-overview","text":"","title":"File Overview"},{"location":"Team-Pitcher-Page/#pagetsx","text":"Purpose : Renders a pitching stats table for the selected team. Key Functionalities : Retrieves the teamName from the URL parameters. Uses React Suspense to display a loading skeleton while fetching data. Calls CreatePitcherTable.tsx to query and render the data.","title":"page.tsx"},{"location":"Team-Pitcher-Page/#how-it-works","text":"The teamName parameter is extracted and decoded. A fallback skeleton ( TableSkeleton.tsx ) is displayed while data loads. CreatePitcherTable.tsx is called to fetch and display the team\u2019s pitcher statistics .","title":"How It Works"},{"location":"Team-Pitcher-Page/#example-usage","text":"<Suspense fallback={<TableSkeleton />}> <CreatePitcherTable team={decodedTeamName} /> </Suspense>","title":"Example Usage"},{"location":"Team-Pitcher-Page/#dependencies","text":"CreatePitcherTable.tsx - Fetches and structures pitcher statistics . TableSkeleton.tsx - Displays a loading animation while data is being retrieved. This file ensures a seamless user experience by dynamically fetching and displaying pitcher-related data for any selected team.","title":"Dependencies"},{"location":"Team-Roster-Page/","text":"Team Roster Page This directory contains the page responsible for displaying the team's roster . File Overview page.tsx Purpose : Renders the roster table for a given team. Key Features : Uses React Suspense to handle loading states with TableSkeleton . Dynamically fetches the team's roster from the database using CreateRosterTable . Decodes the teamName parameter to ensure proper formatting. Component Breakdown CreateRosterTable Queries and formats the team's roster . Displays a sortable table of players. TableSkeleton Provides a loading state for the roster table. Usage Example <Suspense fallback={<TableSkeleton />}> <CreateRosterTable team=\"AUB_TIG\" /> </Suspense> Summary This page is an essential part of the team analytics section , providing users with a detailed roster list for each team in Auburn Baseball.","title":"Team Roster Page"},{"location":"Team-Roster-Page/#team-roster-page","text":"This directory contains the page responsible for displaying the team's roster .","title":"Team Roster Page"},{"location":"Team-Roster-Page/#file-overview","text":"","title":"File Overview"},{"location":"Team-Roster-Page/#pagetsx","text":"Purpose : Renders the roster table for a given team. Key Features : Uses React Suspense to handle loading states with TableSkeleton . Dynamically fetches the team's roster from the database using CreateRosterTable . Decodes the teamName parameter to ensure proper formatting.","title":"page.tsx"},{"location":"Team-Roster-Page/#component-breakdown","text":"","title":"Component Breakdown"},{"location":"Team-Roster-Page/#createrostertable","text":"Queries and formats the team's roster . Displays a sortable table of players.","title":"CreateRosterTable"},{"location":"Team-Roster-Page/#tableskeleton","text":"Provides a loading state for the roster table.","title":"TableSkeleton"},{"location":"Team-Roster-Page/#usage-example","text":"<Suspense fallback={<TableSkeleton />}> <CreateRosterTable team=\"AUB_TIG\" /> </Suspense>","title":"Usage Example"},{"location":"Team-Roster-Page/#summary","text":"This page is an essential part of the team analytics section , providing users with a detailed roster list for each team in Auburn Baseball.","title":"Summary"},{"location":"The-Eye-Overview/","text":"The Eye - Overview This directory serves as the core structure for the Auburn Baseball analytics web application, organizing all components related to player statistics, team data, and conference-wide insights. Directory Structure components/ - Contains reusable UI components such as the sidebar, navigation, and data tables. player/ - Houses all player-specific pages and components, including individual stats, heat maps, and defensive models. team/ - Manages team-specific pages, including rosters, batting/pitching statistics, and team navigation. layout.tsx - Defines the overall layout structure of the app, including the sidebar, top bar, and main content area. page.tsx - The landing page for the application, displaying all conferences and their associated teams. File Details layout.tsx Purpose : Provides the global layout for the application. Key Features : Implements a sidebar and top navigation . Uses Material UI (MUI) components for styling. Dynamically adjusts layout width based on screen size. page.tsx Purpose : Serves as the home page of the app, listing all conferences and their teams. Key Features : Queries Prisma ORM to fetch conference and team data . Uses MUI Grid for a structured layout. Renders a ConferenceTable for each conference with its respective teams. Summary The the-eye/ directory contains the core logic for managing baseball analytics , organizing data into players, teams, and conferences . The layout and home page ensure a seamless user experience with a structured navigation system and efficient data retrieval . This directory acts as the foundation for data visualization and navigation across the application.","title":"The Eye - Overview"},{"location":"The-Eye-Overview/#the-eye-overview","text":"This directory serves as the core structure for the Auburn Baseball analytics web application, organizing all components related to player statistics, team data, and conference-wide insights.","title":"The Eye - Overview"},{"location":"The-Eye-Overview/#directory-structure","text":"components/ - Contains reusable UI components such as the sidebar, navigation, and data tables. player/ - Houses all player-specific pages and components, including individual stats, heat maps, and defensive models. team/ - Manages team-specific pages, including rosters, batting/pitching statistics, and team navigation. layout.tsx - Defines the overall layout structure of the app, including the sidebar, top bar, and main content area. page.tsx - The landing page for the application, displaying all conferences and their associated teams.","title":"Directory Structure"},{"location":"The-Eye-Overview/#file-details","text":"","title":"File Details"},{"location":"The-Eye-Overview/#layouttsx","text":"Purpose : Provides the global layout for the application. Key Features : Implements a sidebar and top navigation . Uses Material UI (MUI) components for styling. Dynamically adjusts layout width based on screen size.","title":"layout.tsx"},{"location":"The-Eye-Overview/#pagetsx","text":"Purpose : Serves as the home page of the app, listing all conferences and their teams. Key Features : Queries Prisma ORM to fetch conference and team data . Uses MUI Grid for a structured layout. Renders a ConferenceTable for each conference with its respective teams.","title":"page.tsx"},{"location":"The-Eye-Overview/#summary","text":"The the-eye/ directory contains the core logic for managing baseball analytics , organizing data into players, teams, and conferences . The layout and home page ensure a seamless user experience with a structured navigation system and efficient data retrieval . This directory acts as the foundation for data visualization and navigation across the application.","title":"Summary"},{"location":"Utils-Directory/","text":"Utils Directory This folder contains utility files that provide core functionality for the application, including database management, type definitions, custom components, and theme settings. Structure Database Management : db.ts - Initializes the Prisma Client for database interactions. Custom Components : Link.tsx - A custom Next.js & MUI Link component for navigation. Data Handling : replacer.ts - Handles BigInt conversion issues in JSON data for compatibility. Styling & Theme : theme.ts - Defines the MUI theme based on Auburn\u2019s branding guide . Type Definitions : types.ts - Defines TypeScript types for database queries and views. File Details db.ts Purpose : Establishes a single database connection for Prisma ORM to avoid issues with Next.js dev server reloads. Key Features : Prevents multiple database connections in development mode. Enables query logging for debugging. Link.tsx Purpose : Combines Next.js Link with MUI Link for navigation. Key Features : Provides MUI styling for links. Supports custom font weight and underlining options . replacer.ts Purpose : Converts bigint values into numbers for JSON serialization. Key Features : Fixes compatibility issues when passing BigInt values as props. Provides custom replacers for different database models ( batters, pitchers, run values ). theme.ts Purpose : Defines the MUI theme using Auburn\u2019s official branding. Key Features : Uses Auburn\u2019s navy and orange colors . Customizes typography using the Inter font. Defines primary, secondary, and text colors . types.ts Purpose : Defines TypeScript types for database queries. Key Features : Defines batting stats, pitching stats, and pitch summaries . Supports custom types for run values and player performance metrics . Summary The utils/ folder contains essential utility files for: - Database connectivity (Prisma ORM) - TypeScript type definitions - Custom JSON serialization handling - Global application theming - Navigation components These utilities ensure efficient data handling, consistent styling, and seamless navigation within the application.","title":"Utils Directory"},{"location":"Utils-Directory/#utils-directory","text":"This folder contains utility files that provide core functionality for the application, including database management, type definitions, custom components, and theme settings.","title":"Utils Directory"},{"location":"Utils-Directory/#structure","text":"Database Management : db.ts - Initializes the Prisma Client for database interactions. Custom Components : Link.tsx - A custom Next.js & MUI Link component for navigation. Data Handling : replacer.ts - Handles BigInt conversion issues in JSON data for compatibility. Styling & Theme : theme.ts - Defines the MUI theme based on Auburn\u2019s branding guide . Type Definitions : types.ts - Defines TypeScript types for database queries and views.","title":"Structure"},{"location":"Utils-Directory/#file-details","text":"","title":"File Details"},{"location":"Utils-Directory/#dbts","text":"Purpose : Establishes a single database connection for Prisma ORM to avoid issues with Next.js dev server reloads. Key Features : Prevents multiple database connections in development mode. Enables query logging for debugging.","title":"db.ts"},{"location":"Utils-Directory/#linktsx","text":"Purpose : Combines Next.js Link with MUI Link for navigation. Key Features : Provides MUI styling for links. Supports custom font weight and underlining options .","title":"Link.tsx"},{"location":"Utils-Directory/#replacerts","text":"Purpose : Converts bigint values into numbers for JSON serialization. Key Features : Fixes compatibility issues when passing BigInt values as props. Provides custom replacers for different database models ( batters, pitchers, run values ).","title":"replacer.ts"},{"location":"Utils-Directory/#themets","text":"Purpose : Defines the MUI theme using Auburn\u2019s official branding. Key Features : Uses Auburn\u2019s navy and orange colors . Customizes typography using the Inter font. Defines primary, secondary, and text colors .","title":"theme.ts"},{"location":"Utils-Directory/#typests","text":"Purpose : Defines TypeScript types for database queries. Key Features : Defines batting stats, pitching stats, and pitch summaries . Supports custom types for run values and player performance metrics .","title":"types.ts"},{"location":"Utils-Directory/#summary","text":"The utils/ folder contains essential utility files for: - Database connectivity (Prisma ORM) - TypeScript type definitions - Custom JSON serialization handling - Global application theming - Navigation components These utilities ensure efficient data handling, consistent styling, and seamless navigation within the application.","title":"Summary"},{"location":"db-setup/","text":"Local DB Setup with Docker Guide 1. Pull the Latest Changes Ensure your local repository is up to date by pulling the latest changes. 2. Shut Down Existing Containers If the container for this project is already running, navigate to the main directory and run the following command in the terminal: docker compose down -v 3. Remove Existing Data Delete the data and backups folders if they exist in the main directory. Warning: This action will delete all data currently stored in the database . rm -rf data backups 4. Update Configuration File Navigate to your .env file and ensure the following settings are correct for local development: SQL_SERVER_NAME: \"localhost\" SQL_PORT: \"5433\" Note: This is for local development only. If running on the server, these values should be set as follows: SQL_SERVER_NAME: \"datagetta.cse.eng.auburn.edu\" SQL_PORT: \"5432\" 5. Start the Containers In the main directory, bring up the containers in detached mode: docker compose up -d This will start the services defined in the docker-compose.yml file for local development.","title":"Local DB Setup with Docker Guide"},{"location":"db-setup/#local-db-setup-with-docker-guide","text":"","title":"Local DB Setup with Docker Guide"},{"location":"db-setup/#1-pull-the-latest-changes","text":"Ensure your local repository is up to date by pulling the latest changes.","title":"1. Pull the Latest Changes"},{"location":"db-setup/#2-shut-down-existing-containers","text":"If the container for this project is already running, navigate to the main directory and run the following command in the terminal: docker compose down -v","title":"2. Shut Down Existing Containers"},{"location":"db-setup/#3-remove-existing-data","text":"Delete the data and backups folders if they exist in the main directory. Warning: This action will delete all data currently stored in the database . rm -rf data backups","title":"3. Remove Existing Data"},{"location":"db-setup/#4-update-configuration-file","text":"Navigate to your .env file and ensure the following settings are correct for local development: SQL_SERVER_NAME: \"localhost\" SQL_PORT: \"5433\" Note: This is for local development only. If running on the server, these values should be set as follows: SQL_SERVER_NAME: \"datagetta.cse.eng.auburn.edu\" SQL_PORT: \"5432\"","title":"4. Update Configuration File"},{"location":"db-setup/#5-start-the-containers","text":"In the main directory, bring up the containers in detached mode: docker compose up -d This will start the services defined in the docker-compose.yml file for local development.","title":"5. Start the Containers"},{"location":"pgadmin-guide/","text":"Guide to Accessing DataGettta Database through PGAdmin Quick Notes This is assuming you have already cloned the project from GitHub and successfully run it locally on Docker. A good way to locally verify this is to run docker containers and then attempt to access the local site at localhost:3000 . 1. Download pgAdmin The official pgAdmin download can be found here . 2. Creating a Connection When pgAdmin is opened after installing, it displays the dashboard. Under the 'Quick Links' section, there is a button that says 'Add New Server'. Upon clicking \"Add New Server\", you will be asked to input various information about the database you want to connect to, under various tabs at the top of the window. The two tabs of importance to us are 'General' and 'Connection'. Note all the connection configuration information can also be found by clicking the question mark at the bottom left of the Register-Server window. General The Name field requires a name for the connection. Note this only for your saved connection and does not relate to the database itself only the connection. This is required. You can leave the other fields as default, but they have useful functionality if you have multiple connections to other databases, want to leave comments, or want to wait to connect. This is not required. You can color-code the saved connection with the background and foreground fields. These colors will affect the UI navigation, so some colors can be very unfriendly to look at. You can toggle if you want to connect immediately or not. You can leave comments about the connection. The following is an example of the General tab configuration. Connection The Host name/address \ufb01eld is the IP or DNS hostname of where the Postgres instance is running. For local deployment, this \ufb01eld is localhost. The port is default at 5432, change only if you change the local con\ufb01guration for the deployment. The username and password is located in the db.env \ufb01le. You can also toggle to save the password if you don\u2019t want to enter it every time you make the connection. The following is an example of the Connection tab con\ufb01guration: After you complete these two tabs, click SAVE in the bottom right corner of the window. This will open the Database in the Object Explorer on the lefthand sidebar of the screen.","title":"Guide to Accessing DataGettta Database through PGAdmin"},{"location":"pgadmin-guide/#guide-to-accessing-datagettta-database-through-pgadmin","text":"","title":"Guide to Accessing DataGettta Database through PGAdmin"},{"location":"pgadmin-guide/#quick-notes","text":"This is assuming you have already cloned the project from GitHub and successfully run it locally on Docker. A good way to locally verify this is to run docker containers and then attempt to access the local site at localhost:3000 .","title":"Quick Notes"},{"location":"pgadmin-guide/#1-download-pgadmin","text":"The official pgAdmin download can be found here .","title":"1. Download pgAdmin"},{"location":"pgadmin-guide/#2-creating-a-connection","text":"When pgAdmin is opened after installing, it displays the dashboard. Under the 'Quick Links' section, there is a button that says 'Add New Server'. Upon clicking \"Add New Server\", you will be asked to input various information about the database you want to connect to, under various tabs at the top of the window. The two tabs of importance to us are 'General' and 'Connection'. Note all the connection configuration information can also be found by clicking the question mark at the bottom left of the Register-Server window.","title":"2. Creating a Connection"},{"location":"pgadmin-guide/#general","text":"The Name field requires a name for the connection. Note this only for your saved connection and does not relate to the database itself only the connection. This is required. You can leave the other fields as default, but they have useful functionality if you have multiple connections to other databases, want to leave comments, or want to wait to connect. This is not required. You can color-code the saved connection with the background and foreground fields. These colors will affect the UI navigation, so some colors can be very unfriendly to look at. You can toggle if you want to connect immediately or not. You can leave comments about the connection. The following is an example of the General tab configuration.","title":"General"},{"location":"pgadmin-guide/#connection","text":"The Host name/address \ufb01eld is the IP or DNS hostname of where the Postgres instance is running. For local deployment, this \ufb01eld is localhost. The port is default at 5432, change only if you change the local con\ufb01guration for the deployment. The username and password is located in the db.env \ufb01le. You can also toggle to save the password if you don\u2019t want to enter it every time you make the connection. The following is an example of the Connection tab con\ufb01guration: After you complete these two tabs, click SAVE in the bottom right corner of the window. This will open the Database in the Object Explorer on the lefthand sidebar of the screen.","title":"Connection"}]}